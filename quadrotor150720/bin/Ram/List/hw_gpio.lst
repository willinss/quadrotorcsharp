###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     28/Apr/2012  19:46:14 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Documents and Settings\Administrator\iar\Myproject\42 #
#                    8IIC\src\Sources\C\Component_C\hw_gpio.c                 #
#    Command line =  "C:\Documents and Settings\Administrator\iar\Myproject\4 #
#                    28IIC\src\Sources\C\Component_C\hw_gpio.c" -D IAR -D     #
#                    TWR_K60N512 -lCN "C:\Documents and                       #
#                    Settings\Administrator\iar\Myproject\428IIC\bin\Ram\List #
#                    \" -lB "C:\Documents and Settings\Administrator\iar\Mypr #
#                    oject\428IIC\bin\Ram\List\" -o "C:\Documents and         #
#                    Settings\Administrator\iar\Myproject\428IIC\bin\Ram\Obj\ #
#                    " --no_cse --no_unroll --no_inline --no_code_motion      #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config "D:\IAR Systems\Embedded Workbench         #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I "C:\Documents     #
#                    and Settings\Administrator\iar\Myproject\428IIC\src\Sour #
#                    ces\H\" -I "C:\Documents and                             #
#                    Settings\Administrator\iar\Myproject\428IIC\src\Sources\ #
#                    H\Component_H\" -I "C:\Documents and                     #
#                    Settings\Administrator\iar\Myproject\428IIC\src\Sources\ #
#                    H\Frame_H\" -Ol --use_c++_inline                         #
#    List file    =  C:\Documents and Settings\Administrator\iar\Myproject\42 #
#                    8IIC\bin\Ram\List\hw_gpio.lst                            #
#    Object file  =  C:\Documents and Settings\Administrator\iar\Myproject\42 #
#                    8IIC\bin\Ram\Obj\hw_gpio.o                               #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\iar\Myproject\428IIC\src\Sources\C\Component_C\hw_gpio.c
      1          //===========================================================================
      2          //文件名称：hw_gpio.c
      3          //功能概要：K60 GPIO底层驱动程序文件
      4          //===========================================================================
      5          
      6          #include "hw_gpio.h"
      7          
      8          //=================内部函数声明===============================================
      9          
     10          //===========================================================================
     11          //函数名称：hw_gpio_get_port_addr
     12          //函数返回：端口号对应的端口寄存器组指针
     13          //参数说明：无
     14          //功能概要：将端口号转换成端口寄存器组指针。内部调用。
     15          //===========================================================================
     16          static PORT_MemMapPtr hw_gpio_get_port_addr(uint8 port);
     17          
     18          //===========================================================================
     19          //函数名称：hw_gpio_get_pt_addr
     20          //函数返回：端口号对应的GPIO端口寄存器组指针
     21          //参数说明：无
     22          //功能概要：将端口号转换成端口寄存器组指针。内部调用。
     23          //============================================================================
     24          static GPIO_MemMapPtr hw_gpio_get_pt_addr(uint8 port);
     25          
     26          //===========================================================================
     27          
     28          
     29          //=================接口函数实现===============================================
     30          
     31          //===========================================================================
     32          //函数名称：hw_gpio_init
     33          //函数返回：函数执行状态。0=成功，其它为异常。
     34          //参数说明：port：端口号。由宏定义。
     35          //          pin：引脚号。0～31。
     36          //          dir：引脚方向。 1=输出，0=输入。
     37          //          state：引脚初始状态。1=高电平，0=低电平
     38          //功能概要：初始化端口作为GPIO引脚的功能。
     39          //===========================================================================

   \                                 In section .text, align 2, keep-with-next
     40          uint8 hw_gpio_init(uint8 port, uint8 pin, uint8 dir, uint8 state)
     41          {
   \                     hw_gpio_init:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   0700               MOVS     R7,R0
   \   00000006   0C00               MOVS     R4,R1
   \   00000008   9046               MOV      R8,R2
   \   0000000A   1D00               MOVS     R5,R3
     42              //将GPIO端口号转换成端口寄存器组指针
     43              GPIO_MemMapPtr pt = hw_gpio_get_pt_addr(port);
   \   0000000C   3800               MOVS     R0,R7
   \   0000000E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   ........           BL       hw_gpio_get_pt_addr
   \   00000014   0600               MOVS     R6,R0
     44              PORT_MemMapPtr p  = hw_gpio_get_port_addr(port);
   \   00000016   3800               MOVS     R0,R7
   \   00000018   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   ........           BL       hw_gpio_get_port_addr
     45              
     46              if (!p) return 1;  //参数错误
   \   0000001E   0028               CMP      R0,#+0
   \   00000020   01D1               BNE.N    ??hw_gpio_init_0
   \   00000022   0120               MOVS     R0,#+1
   \   00000024   23E0               B.N      ??hw_gpio_init_1
     47               
     48              //设定通用端口引脚控制寄存器的值，设定为GPIO功能
     49              PORT_PCR_REG(p, pin) = (0|PORT_PCR_MUX(1));
   \                     ??hw_gpio_init_0:
   \   00000026   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000028   4FF48071           MOV      R1,#+256
   \   0000002C   40F82410           STR      R1,[R0, R4, LSL #+2]
     50          
     51              if(dir == 1) //若引脚被定义为输出
   \   00000030   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000034   B8F1010F           CMP      R8,#+1
   \   00000038   13D1               BNE.N    ??hw_gpio_init_2
     52              {
     53                  GPIO_PDDR_REG(pt) |= (1<<pin);
   \   0000003A   7069               LDR      R0,[R6, #+20]
   \   0000003C   0121               MOVS     R1,#+1
   \   0000003E   A140               LSLS     R1,R1,R4
   \   00000040   0843               ORRS     R0,R1,R0
   \   00000042   7061               STR      R0,[R6, #+20]
     54              	 
     55              	  //设定引脚初始化状态
     56                  if(state == 1)
   \   00000044   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000046   012D               CMP      R5,#+1
   \   00000048   05D1               BNE.N    ??hw_gpio_init_3
     57          		    BSET(pin, GPIO_PDOR_REG(pt));
   \   0000004A   3068               LDR      R0,[R6, #+0]
   \   0000004C   0121               MOVS     R1,#+1
   \   0000004E   A140               LSLS     R1,R1,R4
   \   00000050   0843               ORRS     R0,R1,R0
   \   00000052   3060               STR      R0,[R6, #+0]
   \   00000054   0AE0               B.N      ??hw_gpio_init_4
     58                  else
     59                  	BCLR(pin, GPIO_PDOR_REG(pt));
   \                     ??hw_gpio_init_3:
   \   00000056   3068               LDR      R0,[R6, #+0]
   \   00000058   0121               MOVS     R1,#+1
   \   0000005A   A140               LSLS     R1,R1,R4
   \   0000005C   8843               BICS     R0,R0,R1
   \   0000005E   3060               STR      R0,[R6, #+0]
   \   00000060   04E0               B.N      ??hw_gpio_init_4
     60              }
     61              else //若引脚被定义为输入 
     62              {
     63              	BCLR(pin, GPIO_PDDR_REG(pt));
   \                     ??hw_gpio_init_2:
   \   00000062   7069               LDR      R0,[R6, #+20]
   \   00000064   0121               MOVS     R1,#+1
   \   00000066   A140               LSLS     R1,R1,R4
   \   00000068   8843               BICS     R0,R0,R1
   \   0000006A   7061               STR      R0,[R6, #+20]
     64              }
     65          
     66              return 0;  //成功返回
   \                     ??hw_gpio_init_4:
   \   0000006C   0020               MOVS     R0,#+0
   \                     ??hw_gpio_init_1:
   \   0000006E   BDE8F081           POP      {R4-R8,PC}       ;; return
     67          }
     68          
     69          //===========================================================================
     70          //函数名称：hw_gpio_set
     71          //函数返回：无
     72          //参数说明：port：端口号。由宏定义。
     73          //          pin：引脚号。0～31。
     74          //          state：引脚初始状态。1=高电平，0=低电平
     75          //功能概要：获取指定引脚状态。
     76          //===========================================================================

   \                                 In section .text, align 2, keep-with-next
     77          void hw_gpio_set(uint8 port, uint8 pin, uint8 state)
     78          {
   \                     hw_gpio_set:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0C00               MOVS     R4,R1
   \   00000004   1500               MOVS     R5,R2
     79              //将GPIO端口号转换成端口寄存器组指针
     80              GPIO_MemMapPtr pt = hw_gpio_get_pt_addr(port);
   \   00000006   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   ........           BL       hw_gpio_get_pt_addr
     81          	  
     82          	if (state == 0) //控制为低电平
   \   0000000C   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000E   002D               CMP      R5,#+0
   \   00000010   05D1               BNE.N    ??hw_gpio_set_0
     83                  BCLR(pin, GPIO_PDOR_REG(pt));
   \   00000012   0168               LDR      R1,[R0, #+0]
   \   00000014   0122               MOVS     R2,#+1
   \   00000016   A240               LSLS     R2,R2,R4
   \   00000018   9143               BICS     R1,R1,R2
   \   0000001A   0160               STR      R1,[R0, #+0]
   \   0000001C   04E0               B.N      ??hw_gpio_set_1
     84              else            //控制为高电平
     85                  BSET(pin, GPIO_PDOR_REG(pt));
   \                     ??hw_gpio_set_0:
   \   0000001E   0168               LDR      R1,[R0, #+0]
   \   00000020   0122               MOVS     R2,#+1
   \   00000022   A240               LSLS     R2,R2,R4
   \   00000024   1143               ORRS     R1,R2,R1
   \   00000026   0160               STR      R1,[R0, #+0]
     86          }
   \                     ??hw_gpio_set_1:
   \   00000028   31BD               POP      {R0,R4,R5,PC}    ;; return
     87          
     88          //===========================================================================
     89          //函数名称：hw_gpio_get
     90          //函数返回：指定引脚状态。0=低电平，1=高电平。
     91          //参数说明：port：端口号。由宏定义。
     92          //          pin：引脚号。0～31。
     93          //功能概要：获取指定引脚状态。
     94          //===========================================================================

   \                                 In section .text, align 2, keep-with-next
     95          uint8 hw_gpio_get(uint8 port, uint8 pin)
     96          {
   \                     hw_gpio_get:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0C00               MOVS     R4,R1
     97          	uint8 i; 
     98          	//将GPIO端口号转换成端口寄存器组指针
     99          	GPIO_MemMapPtr pt = hw_gpio_get_pt_addr(port);
   \   00000004   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   ........           BL       hw_gpio_get_pt_addr
    100          	//查看引脚状态
    101          	i = BGET(pin, GPIO_PDIR_REG(pt));
   \   0000000A   0069               LDR      R0,[R0, #+16]
   \   0000000C   E040               LSRS     R0,R0,R4
   \   0000000E   10F00100           ANDS     R0,R0,#0x1
    102          	return i;     //返回引脚状态（0或1）
   \   00000012   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   10BD               POP      {R4,PC}          ;; return
    103          }
    104          
    105          //===========================================================================
    106          //函数名称：hw_gpio_reverse
    107          //函数返回：无
    108          //参数说明：port：端口号。由宏定义。
    109          //          pin：引脚号。0～31。
    110          //功能概要：反转指定引脚状态。
    111          //===========================================================================

   \                                 In section .text, align 2, keep-with-next
    112          void hw_gpio_reverse(uint8 port, uint8 pin)
    113          {
   \                     hw_gpio_reverse:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0C00               MOVS     R4,R1
    114              //将GPIO端口号转换成端口寄存器组指针
    115              GPIO_MemMapPtr pt = hw_gpio_get_pt_addr(port);
   \   00000004   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   ........           BL       hw_gpio_get_pt_addr
    116          	//设置输出取反寄存器的相应位为1，反转指定引脚状态  
    117              BSET(pin, GPIO_PTOR_REG(pt));
   \   0000000A   C168               LDR      R1,[R0, #+12]
   \   0000000C   0122               MOVS     R2,#+1
   \   0000000E   A240               LSLS     R2,R2,R4
   \   00000010   1143               ORRS     R1,R2,R1
   \   00000012   C160               STR      R1,[R0, #+12]
    118          }
   \   00000014   10BD               POP      {R4,PC}          ;; return
    119          
    120          
    121          //=================内部函数实现===============================================
    122          //===========================================================================
    123          //函数名称：hw_gpio_get_port_addr
    124          //函数返回：端口号对应的端口寄存器组指针
    125          //参数说明：无
    126          //功能概要：将端口号转换成端口寄存器组指针。内部调用。
    127          //===========================================================================

   \                                 In section .text, align 2, keep-with-next
    128          PORT_MemMapPtr hw_gpio_get_port_addr (uint8 port)
    129          {
    130          	PORT_MemMapPtr p;
    131              
    132              switch(port)
   \                     hw_gpio_get_port_addr:
   \   00000000   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0028               CMP      R0,#+0
   \   00000004   06D0               BEQ.N    ??hw_gpio_get_port_addr_0
   \   00000006   0228               CMP      R0,#+2
   \   00000008   08D0               BEQ.N    ??hw_gpio_get_port_addr_1
   \   0000000A   05D3               BCC.N    ??hw_gpio_get_port_addr_2
   \   0000000C   0428               CMP      R0,#+4
   \   0000000E   09D0               BEQ.N    ??hw_gpio_get_port_addr_3
   \   00000010   06D3               BCC.N    ??hw_gpio_get_port_addr_4
   \   00000012   09E0               B.N      ??hw_gpio_get_port_addr_5
    133              {
    134              case PORT_A:
    135                  p = PORTA_BASE_PTR;
   \                     ??hw_gpio_get_port_addr_0:
   \   00000014   ....               LDR.N    R0,??DataTable1  ;; 0x40049000
    136                  break;
    137              case PORT_B:
    138                  p = PORTB_BASE_PTR;
    139                  break;
    140              case PORT_C:
    141                  p = PORTC_BASE_PTR;
    142                  break;
    143              case PORT_D:
    144                  p = PORTD_BASE_PTR;
    145                  break;
    146              case PORT_E:
    147                  p = PORTE_BASE_PTR;
    148                  break;
    149              default:
    150                  return 0; //输入参数无效返回
    151              }
    152              
    153              return p;
   \                     ??hw_gpio_get_port_addr_6:
   \                     ??hw_gpio_get_port_addr_7:
   \   00000016   7047               BX       LR               ;; return
   \                     ??hw_gpio_get_port_addr_2:
   \   00000018   ....               LDR.N    R0,??DataTable1_1  ;; 0x4004a000
   \   0000001A   FCE7               B.N      ??hw_gpio_get_port_addr_6
   \                     ??hw_gpio_get_port_addr_1:
   \   0000001C   ....               LDR.N    R0,??DataTable1_2  ;; 0x4004b000
   \   0000001E   FAE7               B.N      ??hw_gpio_get_port_addr_6
   \                     ??hw_gpio_get_port_addr_4:
   \   00000020   ....               LDR.N    R0,??DataTable1_3  ;; 0x4004c000
   \   00000022   F8E7               B.N      ??hw_gpio_get_port_addr_6
   \                     ??hw_gpio_get_port_addr_3:
   \   00000024   ....               LDR.N    R0,??DataTable1_4  ;; 0x4004d000
   \   00000026   F6E7               B.N      ??hw_gpio_get_port_addr_6
   \                     ??hw_gpio_get_port_addr_5:
   \   00000028   0020               MOVS     R0,#+0
   \   0000002A   F4E7               B.N      ??hw_gpio_get_port_addr_7
    154          }
    155          
    156          //===========================================================================
    157          //函数名称：hw_gpio_get_pt_addr
    158          //函数返回：端口号对应的GPIO端口寄存器组指针
    159          //参数说明：无
    160          //功能概要：将端口号转换成端口寄存器组指针。内部调用。
    161          //===========================================================================

   \                                 In section .text, align 2, keep-with-next
    162          GPIO_MemMapPtr hw_gpio_get_pt_addr(uint8 port)
    163          {
    164          	GPIO_MemMapPtr p;
    165              
    166              switch(port)
   \                     hw_gpio_get_pt_addr:
   \   00000000   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0028               CMP      R0,#+0
   \   00000004   06D0               BEQ.N    ??hw_gpio_get_pt_addr_0
   \   00000006   0228               CMP      R0,#+2
   \   00000008   08D0               BEQ.N    ??hw_gpio_get_pt_addr_1
   \   0000000A   05D3               BCC.N    ??hw_gpio_get_pt_addr_2
   \   0000000C   0428               CMP      R0,#+4
   \   0000000E   09D0               BEQ.N    ??hw_gpio_get_pt_addr_3
   \   00000010   06D3               BCC.N    ??hw_gpio_get_pt_addr_4
   \   00000012   09E0               B.N      ??hw_gpio_get_pt_addr_5
    167              {
    168              case PORT_A:
    169                  p = PTA_BASE_PTR;
   \                     ??hw_gpio_get_pt_addr_0:
   \   00000014   ....               LDR.N    R0,??DataTable1_5  ;; 0x400ff000
    170                  break;
    171              case PORT_B:
    172                  p = PTB_BASE_PTR;
    173                  break;
    174              case PORT_C:
    175                  p = PTC_BASE_PTR;
    176                  break;
    177              case PORT_D:
    178                  p = PTD_BASE_PTR;
    179                  break;
    180              case PORT_E:
    181                  p = PTE_BASE_PTR;
    182                  break;
    183              default:
    184                  return 0; //输入参数无效返回
    185              }
    186              
    187              return p;
   \                     ??hw_gpio_get_pt_addr_6:
   \                     ??hw_gpio_get_pt_addr_7:
   \   00000016   7047               BX       LR               ;; return
   \                     ??hw_gpio_get_pt_addr_2:
   \   00000018   ....               LDR.N    R0,??DataTable1_6  ;; 0x400ff040
   \   0000001A   FCE7               B.N      ??hw_gpio_get_pt_addr_6
   \                     ??hw_gpio_get_pt_addr_1:
   \   0000001C   ....               LDR.N    R0,??DataTable1_7  ;; 0x400ff080
   \   0000001E   FAE7               B.N      ??hw_gpio_get_pt_addr_6
   \                     ??hw_gpio_get_pt_addr_4:
   \   00000020   ....               LDR.N    R0,??DataTable1_8  ;; 0x400ff0c0
   \   00000022   F8E7               B.N      ??hw_gpio_get_pt_addr_6
   \                     ??hw_gpio_get_pt_addr_3:
   \   00000024   ....               LDR.N    R0,??DataTable1_9  ;; 0x400ff100
   \   00000026   F6E7               B.N      ??hw_gpio_get_pt_addr_6
   \                     ??hw_gpio_get_pt_addr_5:
   \   00000028   0020               MOVS     R0,#+0
   \   0000002A   F4E7               B.N      ??hw_gpio_get_pt_addr_7
    188          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   00900440           DC32     0x40049000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   00A00440           DC32     0x4004a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   00B00440           DC32     0x4004b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   00C00440           DC32     0x4004c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   00D00440           DC32     0x4004d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   00F00F40           DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   40F00F40           DC32     0x400ff040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   80F00F40           DC32     0x400ff080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   C0F00F40           DC32     0x400ff0c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   00F10F40           DC32     0x400ff100
    189          
    190          //===========================================================================

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     hw_gpio_get                8
     hw_gpio_get_port_addr      0
     hw_gpio_get_pt_addr        0
     hw_gpio_init              24
     hw_gpio_reverse            8
     hw_gpio_set               16


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     hw_gpio_init           114
     hw_gpio_set             42
     hw_gpio_get             22
     hw_gpio_reverse         22
     hw_gpio_get_port_addr   44
     hw_gpio_get_pt_addr     44
     ??DataTable1             4
     ??DataTable1_1           4
     ??DataTable1_2           4
     ??DataTable1_3           4
     ??DataTable1_4           4
     ??DataTable1_5           4
     ??DataTable1_6           4
     ??DataTable1_7           4
     ??DataTable1_8           4
     ??DataTable1_9           4

 
 328 bytes in section .text
 
 328 bytes of CODE memory

Errors: none
Warnings: none
