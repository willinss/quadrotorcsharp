###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     28/Apr/2012  19:46:14 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Documents and Settings\Administrator\iar\Myproject\42 #
#                    8IIC\src\Sources\C\Component_C\get_data.c                #
#    Command line =  "C:\Documents and Settings\Administrator\iar\Myproject\4 #
#                    28IIC\src\Sources\C\Component_C\get_data.c" -D IAR -D    #
#                    TWR_K60N512 -lCN "C:\Documents and                       #
#                    Settings\Administrator\iar\Myproject\428IIC\bin\Ram\List #
#                    \" -lB "C:\Documents and Settings\Administrator\iar\Mypr #
#                    oject\428IIC\bin\Ram\List\" -o "C:\Documents and         #
#                    Settings\Administrator\iar\Myproject\428IIC\bin\Ram\Obj\ #
#                    " --no_cse --no_unroll --no_inline --no_code_motion      #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config "D:\IAR Systems\Embedded Workbench         #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I "C:\Documents     #
#                    and Settings\Administrator\iar\Myproject\428IIC\src\Sour #
#                    ces\H\" -I "C:\Documents and                             #
#                    Settings\Administrator\iar\Myproject\428IIC\src\Sources\ #
#                    H\Component_H\" -I "C:\Documents and                     #
#                    Settings\Administrator\iar\Myproject\428IIC\src\Sources\ #
#                    H\Frame_H\" -Ol --use_c++_inline                         #
#    List file    =  C:\Documents and Settings\Administrator\iar\Myproject\42 #
#                    8IIC\bin\Ram\List\get_data.lst                           #
#    Object file  =  C:\Documents and Settings\Administrator\iar\Myproject\42 #
#                    8IIC\bin\Ram\Obj\get_data.o                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\iar\Myproject\428IIC\src\Sources\C\Component_C\get_data.c
      1          #include  <math.h>    //Keil library  
      2          #include "get_data.h"
      3          #include  "hw_i2c.h"
      4          #include  "uart.h"
      5          #include  "stdio.h"
      6          #include  "pit.h"
      7          #include "Balance_Kalman.h"
      8          #include "isr.h"
      9          #include "hw_gpio.h"
     10          
     11          #define   OSS 0	 //	BMP085使用
     12          
     13          //定义器件在IIC总线中的从地址,根据ALT  ADDRESS地址引脚不同修改
     14          #define	HMC5883L_Addr   0x3C	//磁场传感器器件地址
     15          #define	ADXL345_Addr    0xA6	//加速度传感器器件地址
     16          #define	BMP085_Addr     0xee	//气压传感器器件地址
     17          #define	L3G4200_Addr    0xD2	//陀螺仪传感器器件地址
     18          

   \                                 In section .bss, align 4
     19          unsigned char BUF[6];                         //接收数据缓存区
   \                     BUF:
   \   00000000                      DS8 8

   \                                 In section .bss, align 1
     20          char  test=0; 
   \                     test:
   \   00000000                      DS8 1
     21          //int   x,y;
     22          //float angle;

   \                                 In section .bss, align 2
     23          short A_X,A_Y,A_Z;
   \                     A_X:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     A_Y:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     A_Z:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     24          short T_X,T_Y,T_Z;
   \                     T_X:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     T_Y:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     T_Z:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     25          short data_xyz[3];
   \                     data_xyz:
   \   00000000                      DS8 8
     26          //float Roll,Pitch,Q,T,K;

   \                                 In section .bss, align 4
     27          float Angle_accx = 0,Angle_accy = 0,Angle_accz = 0;
   \                     Angle_accx:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     Angle_accy:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     Angle_accz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     28          float Dot_gyro_x = 0,Dot_gyro_y = 0,Dot_gyro_z = 0;
   \                     Dot_gyro_x:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     Dot_gyro_y:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     Dot_gyro_z:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     29          float Angle_gyrox = 0,Angle_gyroy = 0,Angle_gyroz = 0;
   \                     Angle_gyrox:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     Angle_gyroy:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     Angle_gyroz:
   \   00000000                      DS8 4
     30          //***BMP085使用

   \                                 In section .bss, align 2
     31          short ac1;
   \                     ac1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     32          short ac2; 
   \                     ac2:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     33          short ac3; 
   \                     ac3:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     34          unsigned short ac4;
   \                     ac4:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     35          unsigned short ac5;
   \                     ac5:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     36          unsigned short ac6;
   \                     ac6:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     37          short b1; 
   \                     b1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     38          short b2;
   \                     b2:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     39          short mb;
   \                     mb:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     40          short mc;
   \                     mc:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     41          short md;
   \                     md:
   \   00000000                      DS8 2
     42          

   \                                 In section .bss, align 4
     43          long  temperature;
   \                     temperature:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     44          long  pressure;
   \                     pressure:
   \   00000000                      DS8 4
     45          
     46          /********卡马克方法求算术平方根*********/

   \                                 In section .text, align 2, keep-with-next
     47          float SquareRootFloat(float number)
     48          { 
   \                     SquareRootFloat:
   \   00000000   F0B5               PUSH     {R4-R7,LR}
   \   00000002   0400               MOVS     R4,R0
     49            long i;    
     50            float x, y;    
     51            const float f = 1.5F;    
   \   00000004   5FF07F57           MOVS     R7,#+1069547520
     52            x = number * 0.5F;    
   \   00000008   5FF07C50           MOVS     R0,#+1056964608
   \   0000000C   2100               MOVS     R1,R4
   \   0000000E   ........           BL       __aeabi_fmul
   \   00000012   0600               MOVS     R6,R0
     53            y  = number;    
   \   00000014   2500               MOVS     R5,R4
     54            i  = * ( long * ) &y;    
     55            i  = 0x5f3759df - ( i >> 1 );        //注意这一行    
   \   00000016   ........           LDR.W    R0,??DataTable4  ;; 0x5f3759df
   \   0000001A   B0EB6505           SUBS     R5,R0,R5, ASR #+1
     56            y  = * ( float * ) &i;    
     57            y  = y * ( f - ( x * y * y ) );    
   \   0000001E   3000               MOVS     R0,R6
   \   00000020   2900               MOVS     R1,R5
   \   00000022   ........           BL       __aeabi_fmul
   \   00000026   2900               MOVS     R1,R5
   \   00000028   ........           BL       __aeabi_fmul
   \   0000002C   0100               MOVS     R1,R0
   \   0000002E   3800               MOVS     R0,R7
   \   00000030   ........           BL       __aeabi_fsub
   \   00000034   2900               MOVS     R1,R5
   \   00000036   ........           BL       __aeabi_fmul
   \   0000003A   0500               MOVS     R5,R0
     58            y  = y * ( f - ( x * y * y ) );    
   \   0000003C   3000               MOVS     R0,R6
   \   0000003E   2900               MOVS     R1,R5
   \   00000040   ........           BL       __aeabi_fmul
   \   00000044   2900               MOVS     R1,R5
   \   00000046   ........           BL       __aeabi_fmul
   \   0000004A   0100               MOVS     R1,R0
   \   0000004C   3800               MOVS     R0,R7
   \   0000004E   ........           BL       __aeabi_fsub
   \   00000052   2900               MOVS     R1,R5
   \   00000054   ........           BL       __aeabi_fmul
   \   00000058   0500               MOVS     R5,R0
     59            return number * y;
   \   0000005A   2000               MOVS     R0,R4
   \   0000005C   2900               MOVS     R1,R5
   \   0000005E   ........           BL       __aeabi_fmul
   \   00000062   F0BD               POP      {R4-R7,PC}       ;; return
     60          }
     61          //============================================================================
     62          //函数名称：Delay_Nms                                                        
     63          //功能概要：延时ms。                                                
     64          //参数说明：N为延时的时间单位ms                                                         
     65          //函数返回：无                                                                  
     66          //============================================================================

   \                                 In section .text, align 2, keep-with-next
     67          void Delay_Nms(float N)
     68          {uint32 i = 24000;
   \                     Delay_Nms:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   45F6C050           MOVW     R0,#+24000
     69           i = i * N;
   \   00000008   ........           BL       __aeabi_ui2f
   \   0000000C   2100               MOVS     R1,R4
   \   0000000E   ........           BL       __aeabi_fmul
   \   00000012   ........           BL       __aeabi_f2uiz
   \   00000016   00E0               B.N      ??Delay_Nms_0
     70           while(i>0)i--;
   \                     ??Delay_Nms_1:
   \   00000018   401E               SUBS     R0,R0,#+1
   \                     ??Delay_Nms_0:
   \   0000001A   0028               CMP      R0,#+0
   \   0000001C   FCD1               BNE.N    ??Delay_Nms_1
     71          }
   \   0000001E   10BD               POP      {R4,PC}          ;; return
     72          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
     73          void uart_putchar(unsigned char data)
     74          {
     75              while(!(UART1_S1&UART_S1_TDRE_MASK));//等待发送缓冲区空
   \                     uart_putchar:
   \                     ??uart_putchar_0:
   \   00000000   ........           LDR.W    R1,??DataTable4_1  ;; 0x4006b004
   \   00000004   0978               LDRB     R1,[R1, #+0]
   \   00000006   0906               LSLS     R1,R1,#+24
   \   00000008   FAD5               BPL.N    ??uart_putchar_0
     76              UART1_D=data; 
   \   0000000A   ........           LDR.W    R1,??DataTable4_2  ;; 0x4006b007
   \   0000000E   0870               STRB     R0,[R1, #+0]
     77          }
   \   00000010   7047               BX       LR               ;; return
     78          

   \                                 In section .text, align 2, keep-with-next
     79          void putstr(char ch[])
     80          {
   \                     putstr:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0400               MOVS     R4,R0
     81          	unsigned char ptr=0;
   \   00000004   0025               MOVS     R5,#+0
   \   00000006   04E0               B.N      ??putstr_0
     82          	while(ch[ptr])
     83          	{
     84          	  uart_putchar((unsigned char)ch[ptr++]);
   \                     ??putstr_1:
   \   00000008   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000A   285D               LDRB     R0,[R5, R4]
   \   0000000C   ........           BL       uart_putchar
   \   00000010   6D1C               ADDS     R5,R5,#+1
     85              }   
   \                     ??putstr_0:
   \   00000012   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000014   285D               LDRB     R0,[R5, R4]
   \   00000016   0028               CMP      R0,#+0
   \   00000018   F6D1               BNE.N    ??putstr_1
     86          }
   \   0000001A   31BD               POP      {R0,R4,R5,PC}    ;; return
     87          

   \                                 In section .text, align 2, keep-with-next
     88          long bmp085ReadTemp(void)
     89          {       uint8  temp_ut_l=0,temp_ut_h=0;
   \                     bmp085ReadTemp:
   \   00000000   80B5               PUSH     {R7,LR}
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   8DF80100           STRB     R0,[SP, #+1]
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   8DF80000           STRB     R0,[SP, #+0]
     90                  uint16 temp_ut;
     91                    
     92          	hw_iic_write1(0,BMP085_Addr,0xF4,0x2E);
   \   0000000E   2E23               MOVS     R3,#+46
   \   00000010   F422               MOVS     R2,#+244
   \   00000012   EE21               MOVS     R1,#+238
   \   00000014   0020               MOVS     R0,#+0
   \   00000016   ........           BL       hw_iic_write1
     93          	Delayms(5);	// max time is 4.5ms
   \   0000001A   0520               MOVS     R0,#+5
   \   0000001C   ........           BL       Delayms
     94                  hw_iic_read1(0,BMP085_Addr,0xF6,&temp_ut_h);
   \   00000020   00AB               ADD      R3,SP,#+0
   \   00000022   F622               MOVS     R2,#+246
   \   00000024   EE21               MOVS     R1,#+238
   \   00000026   0020               MOVS     R0,#+0
   \   00000028   ........           BL       hw_iic_read1
     95          	hw_iic_read1(0,BMP085_Addr,0xF6,&temp_ut_l);
   \   0000002C   0DF10103           ADD      R3,SP,#+1
   \   00000030   F622               MOVS     R2,#+246
   \   00000032   EE21               MOVS     R1,#+238
   \   00000034   0020               MOVS     R0,#+0
   \   00000036   ........           BL       hw_iic_read1
     96                  temp_ut = temp_ut_h ;	
   \   0000003A   9DF80000           LDRB     R0,[SP, #+0]
     97                  temp_ut = (temp_ut<<8) | temp_ut_l ;		
   \   0000003E   9DF80110           LDRB     R1,[SP, #+1]
   \   00000042   51EA0020           ORRS     R0,R1,R0, LSL #+8
     98          	return  temp_ut ;
   \   00000046   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000048   02BD               POP      {R1,PC}          ;; return
     99          }
    100          

   \                                 In section .text, align 2, keep-with-next
    101          long bmp085ReadPressure(void)
    102          {
   \                     bmp085ReadPressure:
   \   00000000   80B5               PUSH     {R7,LR}
    103          	uint8  pressure_l,pressure_h;
    104                  uint32 pressure;
    105          	hw_iic_write1(0,BMP085_Addr,0xF4,0x34);
   \   00000002   3423               MOVS     R3,#+52
   \   00000004   F422               MOVS     R2,#+244
   \   00000006   EE21               MOVS     R1,#+238
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   ........           BL       hw_iic_write1
    106          	Delayms(5);	// max time is 4.5ms
   \   0000000E   0520               MOVS     R0,#+5
   \   00000010   ........           BL       Delayms
    107          	hw_iic_read1(0,BMP085_Addr,0xF6,&pressure_h);
   \   00000014   00AB               ADD      R3,SP,#+0
   \   00000016   F622               MOVS     R2,#+246
   \   00000018   EE21               MOVS     R1,#+238
   \   0000001A   0020               MOVS     R0,#+0
   \   0000001C   ........           BL       hw_iic_read1
    108                  hw_iic_read1(0,BMP085_Addr,0xF6,&pressure_l);
   \   00000020   0DF10103           ADD      R3,SP,#+1
   \   00000024   F622               MOVS     R2,#+246
   \   00000026   EE21               MOVS     R1,#+238
   \   00000028   0020               MOVS     R0,#+0
   \   0000002A   ........           BL       hw_iic_read1
    109          	pressure = pressure_h;
   \   0000002E   9DF80000           LDRB     R0,[SP, #+0]
    110                  pressure = (pressure<<8)| pressure_l;		
   \   00000032   9DF80110           LDRB     R1,[SP, #+1]
   \   00000036   51EA0020           ORRS     R0,R1,R0, LSL #+8
    111          	pressure &= 0x0000FFFF;	
   \   0000003A   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
    112          	return pressure;	
   \   0000003C   02BD               POP      {R1,PC}          ;; return
    113          }
    114          
    115          
    116          /*
    117          void read_hmc5883l(void)
    118          {
    119                 hw_iic_write1(0,HMC5883L_Addr,0x00,0x14);   //
    120                 hw_iic_write1(0,HMC5883L_Addr,0x02,0x00);   //
    121            	   Delayms(10);
    122          
    123                 BUF[1]=hw_iic_read1(0,HMC5883L_Addr,0x03);//OUT_X_L_A
    124                 BUF[2]=hw_iic_read1(HMC5883L_Addr,0x04);//OUT_X_H_A
    125          
    126                 BUF[3]=hw_iic_read1(HMC5883L_Addr,0x07);//OUT_Y_L_A
    127                 BUF[4]=hw_iic_read1(HMC5883L_Addr,0x08);//OUT_Y_H_A
    128          
    129                 x=(BUF[1] << 8) | BUF[2]; //Combine MSB and LSB of X Data output register
    130                 y=(BUF[3] << 8) | BUF[4]; //Combine MSB and LSB of Z Data output register
    131          
    132                 if(x>0x7fff)x-=0xffff;	  
    133                 if(y>0x7fff)y-=0xffff;	  
    134                 angle= atan2(y,x) * (180 / 3.14159265) + 180; // angle in degrees
    135          }
    136          */
    137          //****************************************
    138          
    139          //*****************************************

   \                                 In section .text, align 2, keep-with-next
    140          void read_BMP085(void)
    141          {
   \                     read_BMP085:
   \   00000000   10B5               PUSH     {R4,LR}
    142          
    143             	long ut;
    144          	long up;
    145          	long x1, x2, b5, b6, x3, b3, p;
    146          	unsigned long b4, b7;
    147          
    148          	ut = bmp085ReadTemp();	   // 读取温度
   \   00000002   ........           BL       bmp085ReadTemp
   \   00000006   0400               MOVS     R4,R0
    149          //	ut = bmp085ReadTemp();	   // 读取温度
    150          	up = bmp085ReadPressure();  // 读取压强
   \   00000008   ........           BL       bmp085ReadPressure
    151          //	up = bmp085ReadPressure();  // 读取压强
    152          	x1 = ((long)ut - ac6) * ac5 >> 15;
   \   0000000C   ........           LDR.W    R1,??DataTable4_3
   \   00000010   0988               LDRH     R1,[R1, #+0]
   \   00000012   611A               SUBS     R1,R4,R1
   \   00000014   ........           LDR.W    R2,??DataTable4_4
   \   00000018   1288               LDRH     R2,[R2, #+0]
   \   0000001A   5143               MULS     R1,R2,R1
   \   0000001C   C913               ASRS     R1,R1,#+15
    153          	x2 = ((long) mc << 11) / (x1 + md);
   \   0000001E   ........           LDR.W    R2,??DataTable4_5
   \   00000022   B2F90020           LDRSH    R2,[R2, #+0]
   \   00000026   D202               LSLS     R2,R2,#+11
   \   00000028   ........           LDR.W    R3,??DataTable4_6
   \   0000002C   B3F90030           LDRSH    R3,[R3, #+0]
   \   00000030   01FA83F3           SXTAH    R3,R1,R3
   \   00000034   92FBF3F4           SDIV     R4,R2,R3
    154          	b5 = x1 + x2;
   \   00000038   6118               ADDS     R1,R4,R1
    155          	temperature = (b5 + 8) >> 4;
   \   0000003A   11F10802           ADDS     R2,R1,#+8
   \   0000003E   1211               ASRS     R2,R2,#+4
   \   00000040   ........           LDR.W    R3,??DataTable4_7
   \   00000044   1A60               STR      R2,[R3, #+0]
    156          	
    157          	 //****************
    158          
    159          	b6 = b5 - 4000;
   \   00000046   B1F57A62           SUBS     R2,R1,#+4000
    160          	x1 = (b2 * (b6 * b6 >> 12)) >> 11;
   \   0000004A   ........           LDR.W    R1,??DataTable4_8
   \   0000004E   B1F90010           LDRSH    R1,[R1, #+0]
   \   00000052   02FB02F3           MUL      R3,R2,R2
   \   00000056   1B13               ASRS     R3,R3,#+12
   \   00000058   5943               MULS     R1,R3,R1
   \   0000005A   C912               ASRS     R1,R1,#+11
    161          	x2 = ac2 * b6 >> 11;
   \   0000005C   ........           LDR.W    R3,??DataTable4_9
   \   00000060   B3F90030           LDRSH    R3,[R3, #+0]
   \   00000064   5343               MULS     R3,R2,R3
   \   00000066   DC12               ASRS     R4,R3,#+11
    162          	x3 = x1 + x2;
   \   00000068   6118               ADDS     R1,R4,R1
    163          	b3 = (((long)ac1 * 4 + x3) + 2)/4;
   \   0000006A   ........           LDR.W    R3,??DataTable4_10
   \   0000006E   B3F90030           LDRSH    R3,[R3, #+0]
   \   00000072   11EB8301           ADDS     R1,R1,R3, LSL #+2
   \   00000076   891C               ADDS     R1,R1,#+2
   \   00000078   0423               MOVS     R3,#+4
   \   0000007A   91FBF3F3           SDIV     R3,R1,R3
    164          	x1 = ac3 * b6 >> 13;
   \   0000007E   ........           LDR.W    R1,??DataTable4_11
   \   00000082   B1F90010           LDRSH    R1,[R1, #+0]
   \   00000086   5143               MULS     R1,R2,R1
   \   00000088   4913               ASRS     R1,R1,#+13
    165          	x2 = (b1 * (b6 * b6 >> 12)) >> 16;
   \   0000008A   ........           LDR.W    R4,??DataTable4_12
   \   0000008E   B4F90040           LDRSH    R4,[R4, #+0]
   \   00000092   5243               MULS     R2,R2,R2
   \   00000094   1213               ASRS     R2,R2,#+12
   \   00000096   02FB04F2           MUL      R2,R2,R4
   \   0000009A   1414               ASRS     R4,R2,#+16
    166          	x3 = ((x1 + x2) + 2) >> 2;
   \   0000009C   6118               ADDS     R1,R4,R1
   \   0000009E   891C               ADDS     R1,R1,#+2
   \   000000A0   8910               ASRS     R1,R1,#+2
    167          	b4 = (ac4 * (unsigned long) (x3 + 32768)) >> 15;
   \   000000A2   ........           LDR.W    R2,??DataTable4_13
   \   000000A6   1288               LDRH     R2,[R2, #+0]
   \   000000A8   11F50041           ADDS     R1,R1,#+32768
   \   000000AC   01FB02F1           MUL      R1,R1,R2
   \   000000B0   C90B               LSRS     R1,R1,#+15
    168          	b7 = ((unsigned long) up - b3) * (50000 >> OSS);
   \   000000B2   C01A               SUBS     R0,R0,R3
   \   000000B4   4CF25032           MOVW     R2,#+50000
   \   000000B8   5043               MULS     R0,R2,R0
    169          	if( b7 < 0x80000000)
   \   000000BA   10F1004F           CMN      R0,#-2147483648
   \   000000BE   03D2               BCS.N    ??read_BMP085_0
    170          	     p = (b7 * 2) / b4 ;
   \   000000C0   4000               LSLS     R0,R0,#+1
   \   000000C2   B0FBF1F0           UDIV     R0,R0,R1
   \   000000C6   02E0               B.N      ??read_BMP085_1
    171                     else  
    172          		    p = (b7 / b4) * 2;
   \                     ??read_BMP085_0:
   \   000000C8   B0FBF1F0           UDIV     R0,R0,R1
   \   000000CC   4000               LSLS     R0,R0,#+1
    173          	x1 = (p >> 8) * (p >> 8);
   \                     ??read_BMP085_1:
   \   000000CE   0112               ASRS     R1,R0,#+8
   \   000000D0   0212               ASRS     R2,R0,#+8
   \   000000D2   5143               MULS     R1,R2,R1
    174          	x1 = (x1 * 3038) >> 16;
   \   000000D4   40F6DE32           MOVW     R2,#+3038
   \   000000D8   5143               MULS     R1,R2,R1
   \   000000DA   0914               ASRS     R1,R1,#+16
    175          	x2 = (-7357 * p) >> 16;
   \   000000DC   ........           LDR.W    R2,??DataTable4_14  ;; 0xffffe343
   \   000000E0   02FB00F2           MUL      R2,R2,R0
   \   000000E4   1414               ASRS     R4,R2,#+16
    176          	pressure = p + ((x1 + x2 + 3791) >> 4);
   \   000000E6   6118               ADDS     R1,R4,R1
   \   000000E8   01F6CF61           ADDW     R1,R1,#+3791
   \   000000EC   10EB2110           ADDS     R0,R0,R1, ASR #+4
   \   000000F0   ........           LDR.W    R1,??DataTable4_15
   \   000000F4   0860               STR      R0,[R1, #+0]
    177          }
   \   000000F6   10BD               POP      {R4,PC}          ;; return
    178          
    179          //****************************
    180          /* 
    181          void  Init_BMP085(void)
    182          {
    183          	ac1 = hw_iic_read1(BMP085_Addr,0xAA);
    184          	ac1 = (ac1<<8)|hw_iic_read1(BMP085_Addr,0xAB);
    185          
    186            ac2 = hw_iic_read1(BMP085_Addr,0xAC);
    187          	ac2 = (ac2<<8)| hw_iic_read1(BMP085_Addr,0xAD);
    188          
    189          	ac3 = hw_iic_read1(BMP085_Addr,0xAE);
    190          	ac3 = (ac3<<8)| hw_iic_read1(BMP085_Addr,0xAF);
    191          
    192          	ac4 = hw_iic_read1(BMP085_Addr,0xB0);
    193          	ac4 = (ac4<<8)| hw_iic_read1(BMP085_Addr,0xB1);
    194          
    195          	ac5 = hw_iic_read1(BMP085_Addr,0xB2);
    196          	ac5 = (ac5<<8)| hw_iic_read1(BMP085_Addr,0xB3);
    197          
    198          	ac6 = hw_iic_read1(BMP085_Addr,0xB4);
    199          	ac6 = (ac6<<8)| hw_iic_read1(BMP085_Addr,0xB5);
    200          
    201          	b1 = hw_iic_read1(BMP085_Addr,0xB6);
    202          	b1 = (b1<<8)| hw_iic_read1(BMP085_Addr,0xB7);
    203          
    204          	b2 = hw_iic_read1(BMP085_Addr,0xB8);
    205          	b2 = (b2<<8)| hw_iic_read1(BMP085_Addr,0xB9);
    206          
    207          	mb = hw_iic_read1(BMP085_Addr,0xBA);
    208          	mb = (mb<<8)| hw_iic_read1(BMP085_Addr,0xBB);
    209          
    210          	mc = hw_iic_read1(BMP085_Addr,0xBC);
    211          	mc = (mc<<8)| hw_iic_read1(BMP085_Addr,0xBD);
    212          
    213          	md = hw_iic_read1(BMP085_Addr,0xBE);
    214          	md = (md<<8)| hw_iic_read1(BMP085_Addr,0xBF);
    215          
    216          }
    217          */
    218          //****************************
    219          /*
    220          void  Init_HMC5883L()
    221          {
    222             hw_iic_write1(HMC5883L_Addr,0x00,0x14);   //
    223             hw_iic_write1(HMC5883L_Addr,0x02,0x00);   //
    224          }
    225          */
    226          //*****************************************
    227          
    228           //************初始化L3G4200D*********************************

   \                                 In section .text, align 2, keep-with-next
    229          void Init_L3G4200D(void)
    230          {
   \                     Init_L3G4200D:
   \   00000000   80B5               PUSH     {R7,LR}
    231          	while(hw_iic_write1(0,L3G4200_Addr,CTRL_REG1, 0x0f));
   \                     ??Init_L3G4200D_0:
   \   00000002   0F23               MOVS     R3,#+15
   \   00000004   2022               MOVS     R2,#+32
   \   00000006   D221               MOVS     R1,#+210
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   ........           BL       hw_iic_write1
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   F7D1               BNE.N    ??Init_L3G4200D_0
    232          	while(hw_iic_write1(0,L3G4200_Addr,CTRL_REG2, 0x00));
   \                     ??Init_L3G4200D_1:
   \   00000012   0023               MOVS     R3,#+0
   \   00000014   2122               MOVS     R2,#+33
   \   00000016   D221               MOVS     R1,#+210
   \   00000018   0020               MOVS     R0,#+0
   \   0000001A   ........           BL       hw_iic_write1
   \   0000001E   0028               CMP      R0,#+0
   \   00000020   F7D1               BNE.N    ??Init_L3G4200D_1
    233          	while(hw_iic_write1(0,L3G4200_Addr,CTRL_REG3, 0x08));
   \                     ??Init_L3G4200D_2:
   \   00000022   0823               MOVS     R3,#+8
   \   00000024   2222               MOVS     R2,#+34
   \   00000026   D221               MOVS     R1,#+210
   \   00000028   0020               MOVS     R0,#+0
   \   0000002A   ........           BL       hw_iic_write1
   \   0000002E   0028               CMP      R0,#+0
   \   00000030   F7D1               BNE.N    ??Init_L3G4200D_2
    234          	while(hw_iic_write1(0,L3G4200_Addr,CTRL_REG4, 0x00));	//+-250dps
   \                     ??Init_L3G4200D_3:
   \   00000032   0023               MOVS     R3,#+0
   \   00000034   2322               MOVS     R2,#+35
   \   00000036   D221               MOVS     R1,#+210
   \   00000038   0020               MOVS     R0,#+0
   \   0000003A   ........           BL       hw_iic_write1
   \   0000003E   0028               CMP      R0,#+0
   \   00000040   F7D1               BNE.N    ??Init_L3G4200D_3
    235          	while(hw_iic_write1(0,L3G4200_Addr,CTRL_REG5, 0x00));
   \                     ??Init_L3G4200D_4:
   \   00000042   0023               MOVS     R3,#+0
   \   00000044   2422               MOVS     R2,#+36
   \   00000046   D221               MOVS     R1,#+210
   \   00000048   0020               MOVS     R0,#+0
   \   0000004A   ........           BL       hw_iic_write1
   \   0000004E   0028               CMP      R0,#+0
   \   00000050   F7D1               BNE.N    ??Init_L3G4200D_4
    236          }	
   \   00000052   01BD               POP      {R0,PC}          ;; return
    237          //******读取陀螺仪L3G4200D数据****************************************

   \                                 In section .text, align 2, keep-with-next
    238          void read_L3G4200D(void)
    239          { char txtbuf[22]; 
   \                     read_L3G4200D:
   \   00000000   38B5               PUSH     {R3-R5,LR}
    240          
    241            static float Revise_gyroX = 0,Revise_gyroY = 0,Revise_gyroZ = 0;
    242            while(hw_iic_readn(0,L3G4200_Addr, OUT_X_L, BUF, 6));
   \                     ??read_L3G4200D_0:
   \   00000002   0620               MOVS     R0,#+6
   \   00000004   0090               STR      R0,[SP, #+0]
   \   00000006   ........           LDR.W    R3,??DataTable4_16
   \   0000000A   2822               MOVS     R2,#+40
   \   0000000C   D221               MOVS     R1,#+210
   \   0000000E   0020               MOVS     R0,#+0
   \   00000010   ........           BL       hw_iic_readn
   \   00000014   0028               CMP      R0,#+0
   \   00000016   F4D1               BNE.N    ??read_L3G4200D_0
    243          
    244             T_X=	(BUF[1]<<8)|BUF[0];
   \   00000018   ........           LDR.W    R0,??DataTable4_16
   \   0000001C   4078               LDRB     R0,[R0, #+1]
   \   0000001E   ........           LDR.W    R1,??DataTable4_16
   \   00000022   0978               LDRB     R1,[R1, #+0]
   \   00000024   51EA0020           ORRS     R0,R1,R0, LSL #+8
   \   00000028   ........           LDR.W    R1,??DataTable4_17
   \   0000002C   0880               STRH     R0,[R1, #+0]
    245             T_Y=	(BUF[3]<<8)|BUF[2];
   \   0000002E   ........           LDR.W    R0,??DataTable4_16
   \   00000032   C078               LDRB     R0,[R0, #+3]
   \   00000034   ........           LDR.W    R1,??DataTable4_16
   \   00000038   8978               LDRB     R1,[R1, #+2]
   \   0000003A   51EA0020           ORRS     R0,R1,R0, LSL #+8
   \   0000003E   ........           LDR.W    R1,??DataTable4_18
   \   00000042   0880               STRH     R0,[R1, #+0]
    246             T_Z=	(BUF[5]<<8)|BUF[4];
   \   00000044   ........           LDR.W    R0,??DataTable4_16
   \   00000048   4079               LDRB     R0,[R0, #+5]
   \   0000004A   ........           LDR.W    R1,??DataTable4_16
   \   0000004E   0979               LDRB     R1,[R1, #+4]
   \   00000050   51EA0020           ORRS     R0,R1,R0, LSL #+8
   \   00000054   ........           LDR.W    R1,??DataTable4_19
   \   00000058   0880               STRH     R0,[R1, #+0]
    247             
    248             Dot_gyro_x = (float)T_X * 8.75 / 1000 - Revise_gyroX / T * 1000;
   \   0000005A   ........           LDR.W    R0,??DataTable4_17
   \   0000005E   B0F90000           LDRSH    R0,[R0, #+0]
   \   00000062   ........           BL       __aeabi_i2f
   \   00000066   ........           BL       __aeabi_f2d
   \   0000006A   0022               MOVS     R2,#+0
   \   0000006C   ........           LDR.W    R3,??DataTable4_20  ;; 0x40218000
   \   00000070   ........           BL       __aeabi_dmul
   \   00000074   0022               MOVS     R2,#+0
   \   00000076   ........           LDR.W    R3,??DataTable4_21  ;; 0x408f4000
   \   0000007A   ........           BL       __aeabi_ddiv
   \   0000007E   0400               MOVS     R4,R0
   \   00000080   0D00               MOVS     R5,R1
   \   00000082   ........           LDR.W    R0,??DataTable4_22
   \   00000086   0068               LDR      R0,[R0, #+0]
   \   00000088   ........           LDR.W    R1,??DataTable4_23  ;; 0x41a00000
   \   0000008C   ........           BL       __aeabi_fdiv
   \   00000090   ........           LDR.W    R1,??DataTable4_24  ;; 0x447a0000
   \   00000094   ........           BL       __aeabi_fmul
   \   00000098   ........           BL       __aeabi_f2d
   \   0000009C   0200               MOVS     R2,R0
   \   0000009E   0B00               MOVS     R3,R1
   \   000000A0   2000               MOVS     R0,R4
   \   000000A2   2900               MOVS     R1,R5
   \   000000A4   ........           BL       __aeabi_dsub
   \   000000A8   ........           BL       __aeabi_d2f
   \   000000AC   ........           LDR.W    R1,??DataTable4_25
   \   000000B0   0860               STR      R0,[R1, #+0]
    249             Dot_gyro_y = (float)T_Y * 8.75 / 1000 - Revise_gyroY / T * 1000;
   \   000000B2   ........           LDR.W    R0,??DataTable4_18
   \   000000B6   B0F90000           LDRSH    R0,[R0, #+0]
   \   000000BA   ........           BL       __aeabi_i2f
   \   000000BE   ........           BL       __aeabi_f2d
   \   000000C2   0022               MOVS     R2,#+0
   \   000000C4   ........           LDR.W    R3,??DataTable4_20  ;; 0x40218000
   \   000000C8   ........           BL       __aeabi_dmul
   \   000000CC   0022               MOVS     R2,#+0
   \   000000CE   ........           LDR.W    R3,??DataTable4_21  ;; 0x408f4000
   \   000000D2   ........           BL       __aeabi_ddiv
   \   000000D6   0400               MOVS     R4,R0
   \   000000D8   0D00               MOVS     R5,R1
   \   000000DA   ........           LDR.W    R0,??DataTable4_26
   \   000000DE   0068               LDR      R0,[R0, #+0]
   \   000000E0   ........           LDR.W    R1,??DataTable4_23  ;; 0x41a00000
   \   000000E4   ........           BL       __aeabi_fdiv
   \   000000E8   ........           LDR.W    R1,??DataTable4_24  ;; 0x447a0000
   \   000000EC   ........           BL       __aeabi_fmul
   \   000000F0   ........           BL       __aeabi_f2d
   \   000000F4   0200               MOVS     R2,R0
   \   000000F6   0B00               MOVS     R3,R1
   \   000000F8   2000               MOVS     R0,R4
   \   000000FA   2900               MOVS     R1,R5
   \   000000FC   ........           BL       __aeabi_dsub
   \   00000100   ........           BL       __aeabi_d2f
   \   00000104   ........           LDR.W    R1,??DataTable4_27
   \   00000108   0860               STR      R0,[R1, #+0]
    250             Dot_gyro_z = (float)T_Z * 8.75 / 1000 - Revise_gyroZ / T * 1000;
   \   0000010A   ........           LDR.W    R0,??DataTable4_19
   \   0000010E   B0F90000           LDRSH    R0,[R0, #+0]
   \   00000112   ........           BL       __aeabi_i2f
   \   00000116   ........           BL       __aeabi_f2d
   \   0000011A   0022               MOVS     R2,#+0
   \   0000011C   ........           LDR.W    R3,??DataTable4_20  ;; 0x40218000
   \   00000120   ........           BL       __aeabi_dmul
   \   00000124   0022               MOVS     R2,#+0
   \   00000126   ........           LDR.W    R3,??DataTable4_21  ;; 0x408f4000
   \   0000012A   ........           BL       __aeabi_ddiv
   \   0000012E   0400               MOVS     R4,R0
   \   00000130   0D00               MOVS     R5,R1
   \   00000132   ........           LDR.W    R0,??DataTable4_28
   \   00000136   0068               LDR      R0,[R0, #+0]
   \   00000138   ........           LDR.W    R1,??DataTable4_23  ;; 0x41a00000
   \   0000013C   ........           BL       __aeabi_fdiv
   \   00000140   ........           LDR.W    R1,??DataTable4_24  ;; 0x447a0000
   \   00000144   ........           BL       __aeabi_fmul
   \   00000148   ........           BL       __aeabi_f2d
   \   0000014C   0200               MOVS     R2,R0
   \   0000014E   0B00               MOVS     R3,R1
   \   00000150   2000               MOVS     R0,R4
   \   00000152   2900               MOVS     R1,R5
   \   00000154   ........           BL       __aeabi_dsub
   \   00000158   ........           BL       __aeabi_d2f
   \   0000015C   ........           LDR.W    R1,??DataTable4_29
   \   00000160   0860               STR      R0,[R1, #+0]
    251             
    252             Angle_gyrox += Dot_gyro_x * T / 1000 ;
   \   00000162   ........           LDR.W    R0,??DataTable4_25
   \   00000166   0068               LDR      R0,[R0, #+0]
   \   00000168   ........           LDR.W    R1,??DataTable4_23  ;; 0x41a00000
   \   0000016C   ........           BL       __aeabi_fmul
   \   00000170   ........           LDR.W    R1,??DataTable4_24  ;; 0x447a0000
   \   00000174   ........           BL       __aeabi_fdiv
   \   00000178   ........           LDR.W    R1,??DataTable4_30
   \   0000017C   0968               LDR      R1,[R1, #+0]
   \   0000017E   ........           BL       __aeabi_fadd
   \   00000182   ........           LDR.W    R1,??DataTable4_30
   \   00000186   0860               STR      R0,[R1, #+0]
    253             Angle_gyroy += Dot_gyro_y * T / 1000 ;
   \   00000188   ........           LDR.W    R0,??DataTable4_27
   \   0000018C   0068               LDR      R0,[R0, #+0]
   \   0000018E   ........           LDR.W    R1,??DataTable4_23  ;; 0x41a00000
   \   00000192   ........           BL       __aeabi_fmul
   \   00000196   ........           LDR.W    R1,??DataTable4_24  ;; 0x447a0000
   \   0000019A   ........           BL       __aeabi_fdiv
   \   0000019E   ........           LDR.W    R1,??DataTable4_31
   \   000001A2   0968               LDR      R1,[R1, #+0]
   \   000001A4   ........           BL       __aeabi_fadd
   \   000001A8   ........           LDR.W    R1,??DataTable4_31
   \   000001AC   0860               STR      R0,[R1, #+0]
    254             Angle_gyroz += Dot_gyro_z * T / 1000 ;
   \   000001AE   ........           LDR.W    R0,??DataTable4_29
   \   000001B2   0068               LDR      R0,[R0, #+0]
   \   000001B4   ........           LDR.W    R1,??DataTable4_23  ;; 0x41a00000
   \   000001B8   ........           BL       __aeabi_fmul
   \   000001BC   ........           LDR.W    R1,??DataTable4_24  ;; 0x447a0000
   \   000001C0   ........           BL       __aeabi_fdiv
   \   000001C4   ........           LDR.W    R1,??DataTable4_32
   \   000001C8   0968               LDR      R1,[R1, #+0]
   \   000001CA   ........           BL       __aeabi_fadd
   \   000001CE   ........           LDR.W    R1,??DataTable4_32
   \   000001D2   0860               STR      R0,[R1, #+0]
    255           
    256           //////////////////////////修正0点，读1000次然后取平均////////////////////////////     
    257             if(Time_counter == COUNTER)
   \   000001D4   ........           LDR.W    R0,??DataTable4_33
   \   000001D8   0068               LDR      R0,[R0, #+0]
   \   000001DA   4FF47A71           MOV      R1,#+1000
   \   000001DE   8842               CMP      R0,R1
   \   000001E0   1DD1               BNE.N    ??read_L3G4200D_1
    258                { Revise_gyroX = Angle_gyrox / 1000 ;
   \   000001E2   ....               LDR.N    R0,??DataTable4_30
   \   000001E4   0068               LDR      R0,[R0, #+0]
   \   000001E6   ....               LDR.N    R1,??DataTable4_24  ;; 0x447a0000
   \   000001E8   ........           BL       __aeabi_fdiv
   \   000001EC   ....               LDR.N    R1,??DataTable4_22
   \   000001EE   0860               STR      R0,[R1, #+0]
    259                  Revise_gyroY = Angle_gyroy / 1000 ;
   \   000001F0   ....               LDR.N    R0,??DataTable4_31
   \   000001F2   0068               LDR      R0,[R0, #+0]
   \   000001F4   ....               LDR.N    R1,??DataTable4_24  ;; 0x447a0000
   \   000001F6   ........           BL       __aeabi_fdiv
   \   000001FA   ....               LDR.N    R1,??DataTable4_26
   \   000001FC   0860               STR      R0,[R1, #+0]
    260                  Revise_gyroZ = Angle_gyroz / 1000 ;
   \   000001FE   ....               LDR.N    R0,??DataTable4_32
   \   00000200   0068               LDR      R0,[R0, #+0]
   \   00000202   ....               LDR.N    R1,??DataTable4_24  ;; 0x447a0000
   \   00000204   ........           BL       __aeabi_fdiv
   \   00000208   ....               LDR.N    R1,??DataTable4_28
   \   0000020A   0860               STR      R0,[R1, #+0]
    261                  Angle_gyrox = 0;  
   \   0000020C   ....               LDR.N    R0,??DataTable4_30
   \   0000020E   0021               MOVS     R1,#+0
   \   00000210   0160               STR      R1,[R0, #+0]
    262                  Angle_gyroy = 0;
   \   00000212   ....               LDR.N    R0,??DataTable4_31
   \   00000214   0021               MOVS     R1,#+0
   \   00000216   0160               STR      R1,[R0, #+0]
    263                  Angle_gyroz = 0;
   \   00000218   ....               LDR.N    R0,??DataTable4_32
   \   0000021A   0021               MOVS     R1,#+0
   \   0000021C   0160               STR      R1,[R0, #+0]
    264                }   
    265             
    266             
    267             
    268             //Angle_x = -Angle_x;
    269             //if(T_Y>0){sprintf(txtbuf,"\n %d",T_Y);}
    270             //else {sprintf(txtbuf,"\n -%d",-T_Y);}  
    271             //putstr(txtbuf);  
    272          
    273          }
   \                     ??read_L3G4200D_1:
   \   0000021E   31BD               POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .bss, align 4
   \                     ??Revise_gyroX:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??Revise_gyroY:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??Revise_gyroZ:
   \   00000000                      DS8 4
    274          //***************************

   \                                 In section .text, align 2, keep-with-next
    275          void  Init_ADXL345(void)
    276          {
   \                     Init_ADXL345:
   \   00000000   80B5               PUSH     {R7,LR}
    277             while(hw_iic_write1(0,ADXL345_Addr,0x31,0x0B));   //测量范围,正负16g，13位模式
   \                     ??Init_ADXL345_0:
   \   00000002   0B23               MOVS     R3,#+11
   \   00000004   3122               MOVS     R2,#+49
   \   00000006   A621               MOVS     R1,#+166
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   ........           BL       hw_iic_write1
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   F7D1               BNE.N    ??Init_ADXL345_0
    278             while(hw_iic_write1(0,ADXL345_Addr,0x2C,0x08));   //速率设定为100hz 参考pdf13页
   \                     ??Init_ADXL345_1:
   \   00000012   0823               MOVS     R3,#+8
   \   00000014   2C22               MOVS     R2,#+44
   \   00000016   A621               MOVS     R1,#+166
   \   00000018   0020               MOVS     R0,#+0
   \   0000001A   ........           BL       hw_iic_write1
   \   0000001E   0028               CMP      R0,#+0
   \   00000020   F7D1               BNE.N    ??Init_ADXL345_1
    279             while(hw_iic_write1(0,ADXL345_Addr,0x2D,0x08));   //选择电源模式   参考pdf24页
   \                     ??Init_ADXL345_2:
   \   00000022   0823               MOVS     R3,#+8
   \   00000024   2D22               MOVS     R2,#+45
   \   00000026   A621               MOVS     R1,#+166
   \   00000028   0020               MOVS     R0,#+0
   \   0000002A   ........           BL       hw_iic_write1
   \   0000002E   0028               CMP      R0,#+0
   \   00000030   F7D1               BNE.N    ??Init_ADXL345_2
    280             while(hw_iic_write1(0,ADXL345_Addr,0x2E,0x80));   //使能 DATA_READY 中断
   \                     ??Init_ADXL345_3:
   \   00000032   8023               MOVS     R3,#+128
   \   00000034   2E22               MOVS     R2,#+46
   \   00000036   A621               MOVS     R1,#+166
   \   00000038   0020               MOVS     R0,#+0
   \   0000003A   ........           BL       hw_iic_write1
   \   0000003E   0028               CMP      R0,#+0
   \   00000040   F7D1               BNE.N    ??Init_ADXL345_3
    281             while(hw_iic_write1(0,ADXL345_Addr,0x1E,0xFB));   //X 偏移量 根据测试传感器的状态写入pdf29页
   \                     ??Init_ADXL345_4:
   \   00000042   FB23               MOVS     R3,#+251
   \   00000044   1E22               MOVS     R2,#+30
   \   00000046   A621               MOVS     R1,#+166
   \   00000048   0020               MOVS     R0,#+0
   \   0000004A   ........           BL       hw_iic_write1
   \   0000004E   0028               CMP      R0,#+0
   \   00000050   F7D1               BNE.N    ??Init_ADXL345_4
    282             while(hw_iic_write1(0,ADXL345_Addr,0x1F,0x00));   //Y 偏移量 根据测试传感器的状态写入pdf29页
   \                     ??Init_ADXL345_5:
   \   00000052   0023               MOVS     R3,#+0
   \   00000054   1F22               MOVS     R2,#+31
   \   00000056   A621               MOVS     R1,#+166
   \   00000058   0020               MOVS     R0,#+0
   \   0000005A   ........           BL       hw_iic_write1
   \   0000005E   0028               CMP      R0,#+0
   \   00000060   F7D1               BNE.N    ??Init_ADXL345_5
    283             while(hw_iic_write1(0,ADXL345_Addr,0x20,0x05));   //Z 偏移量 根据测试传感器的状态写入pdf29页
   \                     ??Init_ADXL345_6:
   \   00000062   0523               MOVS     R3,#+5
   \   00000064   2022               MOVS     R2,#+32
   \   00000066   A621               MOVS     R1,#+166
   \   00000068   0020               MOVS     R0,#+0
   \   0000006A   ........           BL       hw_iic_write1
   \   0000006E   0028               CMP      R0,#+0
   \   00000070   F7D1               BNE.N    ??Init_ADXL345_6
    284          }
   \   00000072   01BD               POP      {R0,PC}          ;; return
    285          

   \                                 In section .text, align 2, keep-with-next
    286          void read_ADXL345(void)
    287          {      char txtbuf[22];
   \                     read_ADXL345:
   \   00000000   2DE9F843           PUSH     {R3-R9,LR}
    288                 float X0 = 0,Y0 = 0,Z0 = 0;
   \   00000004   0024               MOVS     R4,#+0
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   0026               MOVS     R6,#+0
    289                 static float Revise_accX = 0,Revise_accY = 0,Revise_accZ = 0;
    290                 //int high = 0;
    291                 
    292                 while(hw_iic_readn(0,ADXL345_Addr, 0x32, BUF, 6));
   \                     ??read_ADXL345_0:
   \   0000000A   0620               MOVS     R0,#+6
   \   0000000C   0090               STR      R0,[SP, #+0]
   \   0000000E   ....               LDR.N    R3,??DataTable4_16
   \   00000010   3222               MOVS     R2,#+50
   \   00000012   A621               MOVS     R1,#+166
   \   00000014   0020               MOVS     R0,#+0
   \   00000016   ........           BL       hw_iic_readn
   \   0000001A   0028               CMP      R0,#+0
   \   0000001C   F5D1               BNE.N    ??read_ADXL345_0
    293                 A_X=(BUF[1]<<8)+BUF[0];  //合成数据  
   \   0000001E   ....               LDR.N    R0,??DataTable4_16
   \   00000020   4078               LDRB     R0,[R0, #+1]
   \   00000022   0002               LSLS     R0,R0,#+8
   \   00000024   ....               LDR.N    R1,??DataTable4_16
   \   00000026   0978               LDRB     R1,[R1, #+0]
   \   00000028   50FA81F0           UXTAB    R0,R0,R1
   \   0000002C   ....               LDR.N    R1,??DataTable4_34
   \   0000002E   0880               STRH     R0,[R1, #+0]
    294                 A_Y=(BUF[3]<<8)+BUF[2];  //合成数据
   \   00000030   ....               LDR.N    R0,??DataTable4_16
   \   00000032   C078               LDRB     R0,[R0, #+3]
   \   00000034   0002               LSLS     R0,R0,#+8
   \   00000036   ....               LDR.N    R1,??DataTable4_16
   \   00000038   8978               LDRB     R1,[R1, #+2]
   \   0000003A   50FA81F0           UXTAB    R0,R0,R1
   \   0000003E   ....               LDR.N    R1,??DataTable4_35
   \   00000040   0880               STRH     R0,[R1, #+0]
    295                 A_Z=(BUF[5]<<8)+BUF[4];  //合成数据
   \   00000042   ....               LDR.N    R0,??DataTable4_16
   \   00000044   4079               LDRB     R0,[R0, #+5]
   \   00000046   0002               LSLS     R0,R0,#+8
   \   00000048   ....               LDR.N    R1,??DataTable4_16
   \   0000004A   0979               LDRB     R1,[R1, #+4]
   \   0000004C   50FA81F0           UXTAB    R0,R0,R1
   \   00000050   ....               LDR.N    R1,??DataTable4_36
   \   00000052   0880               STRH     R0,[R1, #+0]
    296          
    297                X0 = (float)A_X*3.9;
   \   00000054   ....               LDR.N    R0,??DataTable4_34
   \   00000056   B0F90000           LDRSH    R0,[R0, #+0]
   \   0000005A   ........           BL       __aeabi_i2f
   \   0000005E   ........           BL       __aeabi_f2d
   \   00000062   5FF03332           MOVS     R2,#+858993459
   \   00000066   ....               LDR.N    R3,??DataTable4_37  ;; 0x400f3333
   \   00000068   ........           BL       __aeabi_dmul
   \   0000006C   ........           BL       __aeabi_d2f
   \   00000070   0400               MOVS     R4,R0
    298                Y0 = (float)A_Y*3.9;
   \   00000072   ....               LDR.N    R0,??DataTable4_35
   \   00000074   B0F90000           LDRSH    R0,[R0, #+0]
   \   00000078   ........           BL       __aeabi_i2f
   \   0000007C   ........           BL       __aeabi_f2d
   \   00000080   5FF03332           MOVS     R2,#+858993459
   \   00000084   ....               LDR.N    R3,??DataTable4_37  ;; 0x400f3333
   \   00000086   ........           BL       __aeabi_dmul
   \   0000008A   ........           BL       __aeabi_d2f
   \   0000008E   0500               MOVS     R5,R0
    299                Z0 = -(float)A_Z*3.9;
   \   00000090   ....               LDR.N    R0,??DataTable4_36
   \   00000092   B0F90000           LDRSH    R0,[R0, #+0]
   \   00000096   ........           BL       __aeabi_i2f
   \   0000009A   90F00040           EORS     R0,R0,#0x80000000
   \   0000009E   ........           BL       __aeabi_f2d
   \   000000A2   5FF03332           MOVS     R2,#+858993459
   \   000000A6   ....               LDR.N    R3,??DataTable4_37  ;; 0x400f3333
   \   000000A8   ........           BL       __aeabi_dmul
   \   000000AC   ........           BL       __aeabi_d2f
   \   000000B0   0600               MOVS     R6,R0
    300          
    301          
    302                //Roll = (float)((atan2(K,Q)*180)/3.14159265 + 90);   //X轴角度值 滚转角
    303               //Pitch = (float)((atan2(K,R)*180)/3.14159265 + 90);  //Y轴角度值 俯仰角
    304                //Yaw = (float)((atan2(R,Q)*180)/3.14159265 + 90);  //Z轴角都值 偏航角 顺时针+
    305                Angle_accx = atan2(X0,SquareRootFloat(Y0*Y0 + Z0*Z0))*57.3 - Revise_accX;
   \   000000B2   2800               MOVS     R0,R5
   \   000000B4   2900               MOVS     R1,R5
   \   000000B6   ........           BL       __aeabi_fmul
   \   000000BA   0700               MOVS     R7,R0
   \   000000BC   3000               MOVS     R0,R6
   \   000000BE   3100               MOVS     R1,R6
   \   000000C0   ........           BL       __aeabi_fmul
   \   000000C4   0100               MOVS     R1,R0
   \   000000C6   3800               MOVS     R0,R7
   \   000000C8   ........           BL       __aeabi_fadd
   \   000000CC   ........           BL       SquareRootFloat
   \   000000D0   ........           BL       __aeabi_f2d
   \   000000D4   0200               MOVS     R2,R0
   \   000000D6   0B00               MOVS     R3,R1
   \   000000D8   9046               MOV      R8,R2
   \   000000DA   9946               MOV      R9,R3
   \   000000DC   2000               MOVS     R0,R4
   \   000000DE   ........           BL       __aeabi_f2d
   \   000000E2   4246               MOV      R2,R8
   \   000000E4   4B46               MOV      R3,R9
   \   000000E6   ........           BL       atan2
   \   000000EA   5FF06632           MOVS     R2,#+1717986918
   \   000000EE   ....               LDR.N    R3,??DataTable4_38  ;; 0x404ca666
   \   000000F0   ........           BL       __aeabi_dmul
   \   000000F4   8046               MOV      R8,R0
   \   000000F6   8946               MOV      R9,R1
   \   000000F8   ....               LDR.N    R0,??DataTable4_39
   \   000000FA   0068               LDR      R0,[R0, #+0]
   \   000000FC   ........           BL       __aeabi_f2d
   \   00000100   0200               MOVS     R2,R0
   \   00000102   0B00               MOVS     R3,R1
   \   00000104   4046               MOV      R0,R8
   \   00000106   4946               MOV      R1,R9
   \   00000108   ........           BL       __aeabi_dsub
   \   0000010C   ........           BL       __aeabi_d2f
   \   00000110   ....               LDR.N    R1,??DataTable4_40
   \   00000112   0860               STR      R0,[R1, #+0]
    306                Angle_accy = atan2(Y0,SquareRootFloat(X0*X0 + Z0*Z0))*57.3 - Revise_accY;
   \   00000114   2000               MOVS     R0,R4
   \   00000116   2100               MOVS     R1,R4
   \   00000118   ........           BL       __aeabi_fmul
   \   0000011C   0700               MOVS     R7,R0
   \   0000011E   3000               MOVS     R0,R6
   \   00000120   3100               MOVS     R1,R6
   \   00000122   ........           BL       __aeabi_fmul
   \   00000126   0100               MOVS     R1,R0
   \   00000128   3800               MOVS     R0,R7
   \   0000012A   ........           BL       __aeabi_fadd
   \   0000012E   ........           BL       SquareRootFloat
   \   00000132   ........           BL       __aeabi_f2d
   \   00000136   0200               MOVS     R2,R0
   \   00000138   0B00               MOVS     R3,R1
   \   0000013A   9046               MOV      R8,R2
   \   0000013C   9946               MOV      R9,R3
   \   0000013E   2800               MOVS     R0,R5
   \   00000140   ........           BL       __aeabi_f2d
   \   00000144   4246               MOV      R2,R8
   \   00000146   4B46               MOV      R3,R9
   \   00000148   ........           BL       atan2
   \   0000014C   5FF06632           MOVS     R2,#+1717986918
   \   00000150   ....               LDR.N    R3,??DataTable4_38  ;; 0x404ca666
   \   00000152   ........           BL       __aeabi_dmul
   \   00000156   8046               MOV      R8,R0
   \   00000158   8946               MOV      R9,R1
   \   0000015A   ....               LDR.N    R0,??DataTable4_41
   \   0000015C   0068               LDR      R0,[R0, #+0]
   \   0000015E   ........           BL       __aeabi_f2d
   \   00000162   0200               MOVS     R2,R0
   \   00000164   0B00               MOVS     R3,R1
   \   00000166   4046               MOV      R0,R8
   \   00000168   4946               MOV      R1,R9
   \   0000016A   ........           BL       __aeabi_dsub
   \   0000016E   ........           BL       __aeabi_d2f
   \   00000172   ....               LDR.N    R1,??DataTable4_42
   \   00000174   0860               STR      R0,[R1, #+0]
    307                Angle_accz = -(atan2(Z0,SquareRootFloat(X0*X0+Y0*Y0))*57.3 + 90 - Revise_accZ);
   \   00000176   2100               MOVS     R1,R4
   \   00000178   2000               MOVS     R0,R4
   \   0000017A   ........           BL       __aeabi_fmul
   \   0000017E   0400               MOVS     R4,R0
   \   00000180   2900               MOVS     R1,R5
   \   00000182   2800               MOVS     R0,R5
   \   00000184   ........           BL       __aeabi_fmul
   \   00000188   0100               MOVS     R1,R0
   \   0000018A   2000               MOVS     R0,R4
   \   0000018C   ........           BL       __aeabi_fadd
   \   00000190   ........           BL       SquareRootFloat
   \   00000194   0400               MOVS     R4,R0
   \   00000196   ....               LDR.N    R0,??DataTable4_43
   \   00000198   0068               LDR      R0,[R0, #+0]
   \   0000019A   ........           BL       __aeabi_f2d
   \   0000019E   8046               MOV      R8,R0
   \   000001A0   8946               MOV      R9,R1
   \   000001A2   2000               MOVS     R0,R4
   \   000001A4   ........           BL       __aeabi_f2d
   \   000001A8   0200               MOVS     R2,R0
   \   000001AA   0B00               MOVS     R3,R1
   \   000001AC   1400               MOVS     R4,R2
   \   000001AE   1D00               MOVS     R5,R3
   \   000001B0   3000               MOVS     R0,R6
   \   000001B2   ........           BL       __aeabi_f2d
   \   000001B6   2200               MOVS     R2,R4
   \   000001B8   2B00               MOVS     R3,R5
   \   000001BA   ........           BL       atan2
   \   000001BE   5FF06632           MOVS     R2,#+1717986918
   \   000001C2   ....               LDR.N    R3,??DataTable4_38  ;; 0x404ca666
   \   000001C4   ........           BL       __aeabi_dmul
   \   000001C8   0022               MOVS     R2,#+0
   \   000001CA   ....               LDR.N    R3,??DataTable4_44  ;; 0x40568000
   \   000001CC   ........           BL       __aeabi_dadd
   \   000001D0   0200               MOVS     R2,R0
   \   000001D2   0B00               MOVS     R3,R1
   \   000001D4   4046               MOV      R0,R8
   \   000001D6   4946               MOV      R1,R9
   \   000001D8   ........           BL       __aeabi_dsub
   \   000001DC   ........           BL       __aeabi_d2f
   \   000001E0   ....               LDR.N    R1,??DataTable4_45
   \   000001E2   0860               STR      R0,[R1, #+0]
    308          //////////////////////////修正0点，读1000次然后取平均////////////////////////////     
    309                if(Time_counter == COUNTER)
   \   000001E4   ....               LDR.N    R0,??DataTable4_33
   \   000001E6   0068               LDR      R0,[R0, #+0]
   \   000001E8   4FF47A71           MOV      R1,#+1000
   \   000001EC   8842               CMP      R0,R1
   \   000001EE   22D1               BNE.N    ??read_ADXL345_1
    310                { Revise_accX = Angle_accx / 1000;
   \   000001F0   ....               LDR.N    R0,??DataTable4_40
   \   000001F2   0068               LDR      R0,[R0, #+0]
   \   000001F4   ....               LDR.N    R1,??DataTable4_24  ;; 0x447a0000
   \   000001F6   ........           BL       __aeabi_fdiv
   \   000001FA   ....               LDR.N    R1,??DataTable4_39
   \   000001FC   0860               STR      R0,[R1, #+0]
    311                  Revise_accY = Angle_accy / 1000;
   \   000001FE   ....               LDR.N    R0,??DataTable4_42
   \   00000200   0068               LDR      R0,[R0, #+0]
   \   00000202   ....               LDR.N    R1,??DataTable4_24  ;; 0x447a0000
   \   00000204   ........           BL       __aeabi_fdiv
   \   00000208   ....               LDR.N    R1,??DataTable4_41
   \   0000020A   0860               STR      R0,[R1, #+0]
    312                  Revise_accZ = Angle_accz / 1000;
   \   0000020C   ....               LDR.N    R0,??DataTable4_45
   \   0000020E   0068               LDR      R0,[R0, #+0]
   \   00000210   ....               LDR.N    R1,??DataTable4_24  ;; 0x447a0000
   \   00000212   ........           BL       __aeabi_fdiv
   \   00000216   ....               LDR.N    R1,??DataTable4_43
   \   00000218   0860               STR      R0,[R1, #+0]
    313                  Angle_accx = 0;
   \   0000021A   ....               LDR.N    R0,??DataTable4_40
   \   0000021C   0021               MOVS     R1,#+0
   \   0000021E   0160               STR      R1,[R0, #+0]
    314                  Angle_accy = 0;
   \   00000220   ....               LDR.N    R0,??DataTable4_42
   \   00000222   0021               MOVS     R1,#+0
   \   00000224   0160               STR      R1,[R0, #+0]
    315                  Angle_accy = 0;
   \   00000226   ....               LDR.N    R0,??DataTable4_42
   \   00000228   0021               MOVS     R1,#+0
   \   0000022A   0160               STR      R1,[R0, #+0]
    316                  
    317                  hw_gpio_set(PORT_A,15,0);  //数据初始化完成
   \   0000022C   0022               MOVS     R2,#+0
   \   0000022E   0F21               MOVS     R1,#+15
   \   00000230   0020               MOVS     R0,#+0
   \   00000232   ........           BL       hw_gpio_set
    318                } 
    319                /*Acc_X = A_X * 3.9 / 1000 * g;
    320                 Acc_Y = A_Y * 3.9 / 1000 * g;
    321                 Acc_Z = g - A_Z * 3.9 / 1000 * g;
    322                 Vel_X = Acc_X * T / 1000;
    323                 Vel_Y = Acc_Y * T / 1000;
    324                 Vel_Z = Acc_Z * T / 1000;
    325                 Pos_X += Vel_X * T / 1000;
    326                 Pos_Y += Vel_Y * T / 1000;
    327                 Pos_Z += Vel_Z * T / 1000;
    328                 */
    329                 /*       
    330              if(A_Z>0){sprintf(txtbuf,"\n %d",A_Z);}
    331              else {sprintf(txtbuf,"\n -%d",-A_Z);}  
    332              putstr(txtbuf);  
    333          
    334           
    335               if(Pos_Z > 0) //补码求出加速度原始对应数值
    336          	{	
    337                  high =  Pos_Z * 10000; 
    338                  //wz=((float)(0xffff-wz+1))*10000*3.9*0.896; //扩大一万倍，好取出整数部分
    339          	// height += (984.6788 - wz) *10000* 0.02 * 0.02 ;
    340                  sprintf(txtbuf,"\n high:%d.%04d",high/10000,high%10000);
    341          	putstr(txtbuf);  			    
    342          	}
    343               else
    344          	{
    345                  high =  -Pos_Z * 10000;
    346          	sprintf(txtbuf,"\n high:-%d.%04d",high/10000,high%10000);
    347          	putstr(txtbuf);    		    
    348          	 }    
    349           */
    350          }
   \                     ??read_ADXL345_1:
   \   00000236   BDE8F183           POP      {R0,R4-R9,PC}    ;; return

   \                                 In section .bss, align 4
   \                     ??Revise_accX:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??Revise_accY:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??Revise_accZ:
   \   00000000                      DS8 4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   DF59375F           DC32     0x5f3759df

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   04B00640           DC32     0x4006b004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   07B00640           DC32     0x4006b007

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   ........           DC32     ac6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   ........           DC32     ac5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   ........           DC32     mc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   ........           DC32     md

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   ........           DC32     temperature

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   ........           DC32     b2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   ........           DC32     ac2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   ........           DC32     ac1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   ........           DC32     ac3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   ........           DC32     b1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   ........           DC32     ac4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   43E3FFFF           DC32     0xffffe343

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   ........           DC32     pressure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   ........           DC32     BUF

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   ........           DC32     T_X

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   ........           DC32     T_Y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   ........           DC32     T_Z

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_20:
   \   00000000   00802140           DC32     0x40218000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_21:
   \   00000000   00408F40           DC32     0x408f4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_22:
   \   00000000   ........           DC32     ??Revise_gyroX

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_23:
   \   00000000   0000A041           DC32     0x41a00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_24:
   \   00000000   00007A44           DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_25:
   \   00000000   ........           DC32     Dot_gyro_x

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_26:
   \   00000000   ........           DC32     ??Revise_gyroY

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_27:
   \   00000000   ........           DC32     Dot_gyro_y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_28:
   \   00000000   ........           DC32     ??Revise_gyroZ

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_29:
   \   00000000   ........           DC32     Dot_gyro_z

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_30:
   \   00000000   ........           DC32     Angle_gyrox

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_31:
   \   00000000   ........           DC32     Angle_gyroy

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_32:
   \   00000000   ........           DC32     Angle_gyroz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_33:
   \   00000000   ........           DC32     Time_counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_34:
   \   00000000   ........           DC32     A_X

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_35:
   \   00000000   ........           DC32     A_Y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_36:
   \   00000000   ........           DC32     A_Z

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_37:
   \   00000000   33330F40           DC32     0x400f3333

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_38:
   \   00000000   66A64C40           DC32     0x404ca666

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_39:
   \   00000000   ........           DC32     ??Revise_accX

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_40:
   \   00000000   ........           DC32     Angle_accx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_41:
   \   00000000   ........           DC32     ??Revise_accY

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_42:
   \   00000000   ........           DC32     Angle_accy

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_43:
   \   00000000   ........           DC32     ??Revise_accZ

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_44:
   \   00000000   00805640           DC32     0x40568000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_45:
   \   00000000   ........           DC32     Angle_accz
    351           
    352          /*************结束***************/

   Maximum stack usage in bytes:

     Function           .cstack
     --------           -------
     Delay_Nms               8
     Init_ADXL345            8
     Init_L3G4200D           8
     SquareRootFloat        20
     bmp085ReadPressure      8
     bmp085ReadTemp          8
     putstr                 16
     read_ADXL345           32
     read_BMP085             8
     read_L3G4200D          16
     uart_putchar            0


   Section sizes:

     Function/Label     Bytes
     --------------     -----
     BUF                   8
     test                  1
     A_X                   2
     A_Y                   2
     A_Z                   2
     T_X                   2
     T_Y                   2
     T_Z                   2
     data_xyz              8
     Angle_accx            4
     Angle_accy            4
     Angle_accz            4
     Dot_gyro_x            4
     Dot_gyro_y            4
     Dot_gyro_z            4
     Angle_gyrox           4
     Angle_gyroy           4
     Angle_gyroz           4
     ac1                   2
     ac2                   2
     ac3                   2
     ac4                   2
     ac5                   2
     ac6                   2
     b1                    2
     b2                    2
     mb                    2
     mc                    2
     md                    2
     temperature           4
     pressure              4
     SquareRootFloat     100
     Delay_Nms            32
     uart_putchar         18
     putstr               28
     bmp085ReadTemp       74
     bmp085ReadPressure   62
     read_BMP085         248
     Init_L3G4200D        84
     read_L3G4200D       544
     Revise_gyroX          4
     Revise_gyroY          4
     Revise_gyroZ          4
     Init_ADXL345        116
     read_ADXL345        570
     Revise_accX           4
     Revise_accY           4
     Revise_accZ           4
     ??DataTable4          4
     ??DataTable4_1        4
     ??DataTable4_2        4
     ??DataTable4_3        4
     ??DataTable4_4        4
     ??DataTable4_5        4
     ??DataTable4_6        4
     ??DataTable4_7        4
     ??DataTable4_8        4
     ??DataTable4_9        4
     ??DataTable4_10       4
     ??DataTable4_11       4
     ??DataTable4_12       4
     ??DataTable4_13       4
     ??DataTable4_14       4
     ??DataTable4_15       4
     ??DataTable4_16       4
     ??DataTable4_17       4
     ??DataTable4_18       4
     ??DataTable4_19       4
     ??DataTable4_20       4
     ??DataTable4_21       4
     ??DataTable4_22       4
     ??DataTable4_23       4
     ??DataTable4_24       4
     ??DataTable4_25       4
     ??DataTable4_26       4
     ??DataTable4_27       4
     ??DataTable4_28       4
     ??DataTable4_29       4
     ??DataTable4_30       4
     ??DataTable4_31       4
     ??DataTable4_32       4
     ??DataTable4_33       4
     ??DataTable4_34       4
     ??DataTable4_35       4
     ??DataTable4_36       4
     ??DataTable4_37       4
     ??DataTable4_38       4
     ??DataTable4_39       4
     ??DataTable4_40       4
     ??DataTable4_41       4
     ??DataTable4_42       4
     ??DataTable4_43       4
     ??DataTable4_44       4
     ??DataTable4_45       4

 
   119 bytes in section .bss
 2 060 bytes in section .text
 
 2 060 bytes of CODE memory
   119 bytes of DATA memory

Errors: none
Warnings: 5
