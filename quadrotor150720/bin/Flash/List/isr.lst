###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     03/Aug/2015  09:48:13 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Thinkpad\Desktop\quadrotor150720飞行器跟随小车( #
#                    改I2C)\src\Sources\C\isr.c                               #
#    Command line =  "C:\Users\Thinkpad\Desktop\quadrotor150720飞行器跟随小车 #
#                    (改I2C)\src\Sources\C\isr.c" -D IAR -D TWR_K60N512 -lCN  #
#                    "C:\Users\Thinkpad\Desktop\quadrotor150720飞行器跟随小车 #
#                    (改I2C)\bin\Flash\List\" -lB                             #
#                    "C:\Users\Thinkpad\Desktop\quadrotor150720飞行器跟随小车 #
#                    (改I2C)\bin\Flash\List\" -o                              #
#                    "C:\Users\Thinkpad\Desktop\quadrotor150720飞行器跟随小车 #
#                    (改I2C)\bin\Flash\Obj\" --no_cse --no_unroll             #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "E:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "C:\Users\Thinkpad\Desktop\quadrotor150720飞行 #
#                    器跟随小车(改I2C)\src\Sources\H\" -I                     #
#                    "C:\Users\Thinkpad\Desktop\quadrotor150720飞行器跟随小车 #
#                    (改I2C)\src\Sources\H\Component_H\" -I                   #
#                    "C:\Users\Thinkpad\Desktop\quadrotor150720飞行器跟随小车 #
#                    (改I2C)\src\Sources\H\Frame_H\" -Ol --use_c++_inline     #
#    List file    =  C:\Users\Thinkpad\Desktop\quadrotor150720飞行器跟随小车( #
#                    改I2C)\bin\Flash\List\isr.lst                            #
#    Object file  =  C:\Users\Thinkpad\Desktop\quadrotor150720飞行器跟随小车( #
#                    改I2C)\bin\Flash\Obj\isr.o                               #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Thinkpad\Desktop\quadrotor150720飞行器跟随小车(改I2C)\src\Sources\C\isr.c
      1          //-------------------------------------------------------------------------*
      2          // 文件名: isr.c                                                           *
      3          // 说  明: 中断处理例程                                                    *
      4          
      5          #include "includes.h"
      6          #include "math.h"
      7          #include "control.h"
      8          #define Initial_Ok 0xe9
      9          

   \                                 In section .bss, align 4
     10          float revise_x  = 0;
   \                     revise_x:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     11          float revise_y  = 0;
   \                     revise_y:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     12          uint32 Time_counter = 0;
   \                     Time_counter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 2
     13          uint16 Height = 0;
   \                     Height:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     14          uint16 BaseHeight = 0;
   \                     BaseHeight:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     15          bool send_data = false;
   \                     send_data:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     16          bool Pit_update = false;
   \                     Pit_update:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     17          bool Landing  = false;
   \                     Landing:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     18          bool Start_flag = false;
   \                     Start_flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     19          bool Stop_flag = false;
   \                     Stop_flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     20          bool Backup_landing = false;
   \                     Backup_landing:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     21          bool Height_update = false;
   \                     Height_update:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     22          bool Send_flag = false;
   \                     Send_flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     23          bool Initial_flag = false;
   \                     Initial_flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     24          bool startMotion = false;
   \                     startMotion:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     25          bool signal_target = false;//用以判断摄像头是否发现目标
   \                     signal_target:
   \   00000000                      DS8 1
     26          

   \                                 In section .bss, align 1
     27          uint8 motionState = motionClear;
   \                     motionState:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     28          float data_high[7] = {0};
   \                     data_high:
   \   00000000                      DS8 28

   \                                 In section .bss, align 4
     29          float datas_mid[7];
   \                     datas_mid:
   \   00000000                      DS8 28
     30          

   \                                 In section .bss, align 1
     31          uint8 irq_counter = 0;
   \                     irq_counter:
   \   00000000                      DS8 1
     32          

   \                                 In section .bss, align 2
     33          int16 Pwm_h = 0;
   \                     Pwm_h:
   \   00000000                      DS8 2
     34          //uint8 Fix_high = 0;
     35          //uint16 Fix_h = 0;

   \                                 In section .data, align 1
     36          uint8 Clear = 1;
   \                     Clear:
   \   00000000   0x01               DC8 1

   \                                 In section .bss, align 4
     37          float High = 0;
   \                     `High`:
   \   00000000                      DS8 4
     38          

   \                                 In section .bss, align 8
     39          double Axis_x = 0;
   \                     Axis_x:
   \   00000000                      DS8 8

   \                                 In section .bss, align 8
     40          double Axis_y = 0;
   \                     Axis_y:
   \   00000000                      DS8 8

   \                                 In section .bss, align 1
     41          bool Axis_update = false;
   \                     Axis_update:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     42          int16 isrcounter = 0;
   \                     isrcounter:
   \   00000000                      DS8 2
     43          

   \                                 In section .data, align 1
     44          uint8 Fly_Mode = 0x6e;//默认为自由模式
   \                     Fly_Mode:
   \   00000000   0x6E               DC8 110

   \                                 In section .data, align 1
     45          uint8 Debug_Mode = LoacalK60Mod;
   \                     Debug_Mode:
   \   00000000   0xEE               DC8 238

   \                                 In section .bss, align 4
     46          float c_revise_x = 0,c_revise_y = 0;
   \                     c_revise_x:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     c_revise_y:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     47          float signal_x =0,signal_y = 0;
   \                     signal_x:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     signal_y:
   \   00000000                      DS8 4

   \                                 In section .text, align 2, keep-with-next
     48          float median(float *data, char length, float high)
     49          {
   \                     median:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x000B             MOVS     R3,R1
     50              unsigned char ii, jj, mid;
     51              float data_tmp;
     52          
     53          
     54              data_high[0] = data_high[1];
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable4
   \   00000008   0x6849             LDR      R1,[R1, #+4]
   \   0000000A   0x.... 0x....      LDR.W    R4,??DataTable4
   \   0000000E   0x6021             STR      R1,[R4, #+0]
     55              data_high[1] = data_high[2];
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable4
   \   00000014   0x.... 0x....      LDR.W    R4,??DataTable4
   \   00000018   0x68A4             LDR      R4,[R4, #+8]
   \   0000001A   0x604C             STR      R4,[R1, #+4]
     56              data_high[2] = data_high[3];
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable4
   \   00000020   0x.... 0x....      LDR.W    R4,??DataTable4
   \   00000024   0x68E4             LDR      R4,[R4, #+12]
   \   00000026   0x608C             STR      R4,[R1, #+8]
     57              data_high[3] = data_high[4];
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable4
   \   0000002C   0x.... 0x....      LDR.W    R4,??DataTable4
   \   00000030   0x6924             LDR      R4,[R4, #+16]
   \   00000032   0x60CC             STR      R4,[R1, #+12]
     58              data_high[4] = data_high[5];
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable4
   \   00000038   0x.... 0x....      LDR.W    R4,??DataTable4
   \   0000003C   0x6964             LDR      R4,[R4, #+20]
   \   0000003E   0x610C             STR      R4,[R1, #+16]
     59              data_high[5] = data_high[6];
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable4
   \   00000044   0x.... 0x....      LDR.W    R4,??DataTable4
   \   00000048   0x69A4             LDR      R4,[R4, #+24]
   \   0000004A   0x614C             STR      R4,[R1, #+20]
     60              data_high[6] = high;
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable4
   \   00000050   0x618A             STR      R2,[R1, #+24]
     61          
     62              mid = length >> 1;
   \   00000052   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000054   0x085A             LSRS     R2,R3,#+1
     63              for(ii = 0; ii < length; ii++)
   \   00000056   0x2400             MOVS     R4,#+0
   \   00000058   0xE008             B.N      ??median_0
     64              {
     65                  *(datas_mid + ii) = *(data + ii);
   \                     ??median_1:
   \   0000005A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005C   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   00000060   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000062   0x.... 0x....      LDR.W    R5,??DataTable4_1
   \   00000066   0xF845 0x1024      STR      R1,[R5, R4, LSL #+2]
     66              }
   \   0000006A   0x1C64             ADDS     R4,R4,#+1
   \                     ??median_0:
   \   0000006C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000070   0x429C             CMP      R4,R3
   \   00000072   0xD3F2             BCC.N    ??median_1
     67          
     68              for(ii = 0; ii <= mid; ii++)
   \   00000074   0x2400             MOVS     R4,#+0
   \   00000076   0xE026             B.N      ??median_2
     69                  for(jj = ii + 1; jj < length; jj++)
     70                  {
     71          
     72                      if (*(datas_mid + ii) < *(datas_mid + jj) )
   \                     ??median_3:
   \   00000078   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable4_1
   \   0000007E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000082   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000084   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \   00000088   0xF851 0x1025      LDR      R1,[R1, R5, LSL #+2]
   \   0000008C   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000090   0xD213             BCS.N    ??median_4
     73                      {
     74                          data_tmp = *(datas_mid + ii);
   \   00000092   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable4_1
   \   00000098   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
     75                          *(datas_mid + ii) = *(datas_mid + jj);
   \   0000009C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000009E   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \   000000A2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A4   0x.... 0x....      LDR.W    R6,??DataTable4_1
   \   000000A8   0xF856 0x6025      LDR      R6,[R6, R5, LSL #+2]
   \   000000AC   0xF841 0x6024      STR      R6,[R1, R4, LSL #+2]
     76                          *(datas_mid + jj) = data_tmp;
   \   000000B0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000B2   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \   000000B6   0xF841 0x0025      STR      R0,[R1, R5, LSL #+2]
     77                      }
     78                  }
   \                     ??median_4:
   \   000000BA   0x1C6D             ADDS     R5,R5,#+1
   \                     ??median_5:
   \   000000BC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000BE   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000000C0   0x429D             CMP      R5,R3
   \   000000C2   0xD3D9             BCC.N    ??median_3
   \   000000C4   0x1C64             ADDS     R4,R4,#+1
   \                     ??median_2:
   \   000000C6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000C8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000CA   0x42A2             CMP      R2,R4
   \   000000CC   0xD301             BCC.N    ??median_6
   \   000000CE   0x1C65             ADDS     R5,R4,#+1
   \   000000D0   0xE7F4             B.N      ??median_5
     79              return *(datas_mid + mid);
   \                     ??median_6:
   \   000000D2   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable4_1
   \   000000D8   0xF850 0x0022      LDR      R0,[R0, R2, LSL #+2]
   \   000000DC   0xBD70             POP      {R4-R6,PC}       ;; return
     80          }
     81          
     82          /*
     83          int get_mid(int a, int b,int c)
     84          {
     85           int x=0;
     86           if(a>b){x=b;b=a;a=x;}
     87           if(b>c){x=c;c=b;b=x;}
     88           if(a>b){x=b;b=a;a=x;}
     89           return b ;
     90          }
     91          */
     92          //-------------------------------------------------------------------------*
     93          //函数名: uart0_isr                                                        *
     94          //功  能: 串口0数据接收中断例                                              *
     95          //说  明: 无                                                               *
     96          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     97          void uart0_isr(void)
     98          { uint8 ch = 0;
   \                     uart0_isr:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xF88D 0x0000      STRB     R0,[SP, #+0]
     99            static uint8 send_data_flag = 0;
    100            uart_re1 (UART0, &ch);
   \   00000008   0xA900             ADD      R1,SP,#+0
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable4_2  ;; 0x4006a000
   \   0000000E   0x.... 0x....      BL       uart_re1
    101             if(Stop_flag == true)
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable4_3
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD040             BEQ.N    ??uart0_isr_0
    102           {
    103              if(send_data_flag = 0 && ch == 0xaa)send_data_flag = 1;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable4_4
   \   00000022   0x7008             STRB     R0,[R1, #+0]
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD003             BEQ.N    ??uart0_isr_1
   \   0000002A   0x....             LDR.N    R0,??DataTable4_4
   \   0000002C   0x2101             MOVS     R1,#+1
   \   0000002E   0x7001             STRB     R1,[R0, #+0]
   \   00000030   0xE035             B.N      ??uart0_isr_0
    104              else if(send_data_flag = 1 && ch == 0x4a)send_data_flag = 2;
   \                     ??uart0_isr_1:
   \   00000032   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000036   0x284A             CMP      R0,#+74
   \   00000038   0xD101             BNE.N    ??uart0_isr_2
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0xE000             B.N      ??uart0_isr_3
   \                     ??uart0_isr_2:
   \   0000003E   0x2000             MOVS     R0,#+0
   \                     ??uart0_isr_3:
   \   00000040   0x....             LDR.N    R1,??DataTable4_4
   \   00000042   0x7008             STRB     R0,[R1, #+0]
   \   00000044   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD003             BEQ.N    ??uart0_isr_4
   \   0000004A   0x....             LDR.N    R0,??DataTable4_4
   \   0000004C   0x2102             MOVS     R1,#+2
   \   0000004E   0x7001             STRB     R1,[R0, #+0]
   \   00000050   0xE025             B.N      ??uart0_isr_0
    105              else if(send_data_flag = 2 && ch == 0x06)send_data_flag = 3;
   \                     ??uart0_isr_4:
   \   00000052   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000056   0x2806             CMP      R0,#+6
   \   00000058   0xD101             BNE.N    ??uart0_isr_5
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0xE000             B.N      ??uart0_isr_6
   \                     ??uart0_isr_5:
   \   0000005E   0x2000             MOVS     R0,#+0
   \                     ??uart0_isr_6:
   \   00000060   0x....             LDR.N    R1,??DataTable4_4
   \   00000062   0x7008             STRB     R0,[R1, #+0]
   \   00000064   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD003             BEQ.N    ??uart0_isr_7
   \   0000006A   0x....             LDR.N    R0,??DataTable4_4
   \   0000006C   0x2103             MOVS     R1,#+3
   \   0000006E   0x7001             STRB     R1,[R0, #+0]
   \   00000070   0xE015             B.N      ??uart0_isr_0
    106              else if(send_data_flag = 3 && ch == 0xbb)
   \                     ??uart0_isr_7:
   \   00000072   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000076   0x28BB             CMP      R0,#+187
   \   00000078   0xD101             BNE.N    ??uart0_isr_8
   \   0000007A   0x2001             MOVS     R0,#+1
   \   0000007C   0xE000             B.N      ??uart0_isr_9
   \                     ??uart0_isr_8:
   \   0000007E   0x2000             MOVS     R0,#+0
   \                     ??uart0_isr_9:
   \   00000080   0x....             LDR.N    R1,??DataTable4_4
   \   00000082   0x7008             STRB     R0,[R1, #+0]
   \   00000084   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000086   0x2800             CMP      R0,#+0
   \   00000088   0xD006             BEQ.N    ??uart0_isr_10
    107              {
    108                send_data_flag = 0;
   \   0000008A   0x....             LDR.N    R0,??DataTable4_4
   \   0000008C   0x2100             MOVS     R1,#+0
   \   0000008E   0x7001             STRB     R1,[R0, #+0]
    109                Send_flag = true;
   \   00000090   0x....             LDR.N    R0,??DataTable4_5
   \   00000092   0x2101             MOVS     R1,#+1
   \   00000094   0x7001             STRB     R1,[R0, #+0]
   \   00000096   0xE002             B.N      ??uart0_isr_0
    110              }
    111             else send_data_flag = 0;
   \                     ??uart0_isr_10:
   \   00000098   0x....             LDR.N    R0,??DataTable4_4
   \   0000009A   0x2100             MOVS     R1,#+0
   \   0000009C   0x7001             STRB     R1,[R0, #+0]
    112           }
    113           
    114           if(ch == 0xee)print_pixel_data();
   \                     ??uart0_isr_0:
   \   0000009E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000A2   0x28EE             CMP      R0,#+238
   \   000000A4   0xD101             BNE.N    ??uart0_isr_11
   \   000000A6   0x.... 0x....      BL       print_pixel_data
    115           
    116          }
   \                     ??uart0_isr_11:
   \   000000AA   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 1
   \                     ??send_data_flag:
   \   00000000                      DS8 1
    117          //-------------------------------------------------------------------------*
    118          //函数名: uart0_isr                                                        *
    119          //功  能: 串口1数据接收中断例                                              *
    120          //说  明: 无                                                               *
    121          //-------------------------------------------------------------------------*

   \                                 In section .bss, align 4
    122          int re_X;
   \                     re_X:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    123          int re_Y;
   \                     re_Y:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
    124          uint8 CH;
   \                     CH:
   \   00000000                      DS8 1
    125          //extern int PointX,PointY;
    126          //int targetlosetime=0;
    127          
    128          //int GlobleRec[10];

   \                                 In section .text, align 2, keep-with-next
    129          void uart1_isr(void)
    130          {
   \                     uart1_isr:
   \   00000000   0xB580             PUSH     {R7,LR}
    131              uint8 ch;
    132              static uint8 data_flag = 0;
    133              //static uint8 i = 0;
    134              //static uint8 axis[4] = {0};
    135              static uint8 rec0[4]={0};
    136              //static uint8 send0[6]={0};
    137              static bool data_finish = true;
    138              static bool rev_data_fish = true;
    139              static uint8 revise_flag = 0;
    140              static uint8 buff_counter=0;
    141           
    142              
    143              //接收一个字节数据并回发
    144              uart_re1 (UART1, &ch);
   \   00000002   0xA900             ADD      R1,SP,#+0
   \   00000004   0x....             LDR.N    R0,??DataTable4_6  ;; 0x4006b000
   \   00000006   0x.... 0x....      BL       uart_re1
    145              CH=ch;
   \   0000000A   0x....             LDR.N    R0,??DataTable4_7
   \   0000000C   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000010   0x7001             STRB     R1,[R0, #+0]
    146              
    147          
    148             if(ch>0x60 &&ch<0x80)//判断接受字节为此范围数据则是遥控器信号
   \   00000012   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000016   0x3861             SUBS     R0,R0,#+97
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x281F             CMP      R0,#+31
   \   0000001C   0xD24C             BCS.N    ??uart1_isr_0
    149             {
    150          //////////////////////////////接收目标位置坐标//////////////////////////////////
    151          //    if(data_flag == 2)
    152          //    {
    153          //        axis[i] = ch;
    154          //        i++;
    155          //    }
    156          //    if(i >= 4)
    157          //    {
    158          //        data_finish = false;
    159          //        axistemp = *(int32 *)axis;
    160          //        Axis_x = axistemp % 1000;
    161          //        Axis_y = axistemp / 1000 % 1000;
    162          //        symbolBit = axistemp / 1000000;
    163          //        //Axis_y = *(int16 *)(axis + 2);
    164          //        if(symbolBit == 1)Axis_y = -Axis_y;
    165          //        if(symbolBit == 2)Axis_x = -Axis_x;
    166          //        if(symbolBit == 3){Axis_y = -Axis_y;Axis_x = -Axis_x;}
    167          //        i = 0;
    168          //        data_flag = 0;
    169          //        isrcounter++;
    170          //        Axis_update = true;
    171          //    }
    172          //    else
    173          //    {
    174          //        data_finish = true;
    175          //    }
    176          //    
    177          //    if(data_flag == 0 && Start_flag == true)
    178          //    {
    179          //        if(ch == Axis_First_Frame) data_flag = 1;
    180          //        else           data_flag = 0;
    181          //    }
    182          //    else if (data_flag == 1 )
    183          //    {
    184          //        if(ch == Axis_End_Frame) data_flag = 2;
    185          //        else           data_flag = 0;
    186          //    }
    187          ////////////////////////////////////////////////////////////////////////////////    
    188          //////////////////////////初始化参数接收////////////////////////////////////////
    189          //  rev_data_fish = true;
    190          //  if(Initial_flag == false)
    191          //  {
    192          //    if(revise_flag == 2)
    193          //    {
    194          //        revise_data[j] = ch;
    195          //        j++;
    196          //    }
    197          //    if(j >= 82  && revise_data[80]== 0xD3 && revise_data[81]== 0xDA)
    198          //    {
    199          //        rev_data_fish = false;
    200          //        c_revise_y = *(float *)revise_data;
    201          //        c_revise_x = *(float *)(revise_data + 4 * 1);
    202          //        Kp3 = *(float *)(revise_data + 4 * 2);
    203          //        Ki3 = *(float *)(revise_data + 4 * 3);
    204          //        Kd3 = *(float *)(revise_data + 4 * 4);
    205          //        
    206          //        Kp2 = *(float *)(revise_data + 4 * 5);
    207          //        Ki2 = *(float *)(revise_data + 4 * 6);
    208          //        Kd2 = *(float *)(revise_data + 4 * 7);
    209          //        
    210          //        Kp4 = *(float *)(revise_data + 4 * 8);
    211          //        Ki4 = *(float *)(revise_data + 4 * 9);
    212          //        Kd4 = *(float *)(revise_data + 4 * 10);
    213          //        
    214          //        Kx = *(float *)(revise_data + 4 * 11);
    215          //        Kix = *(float *)(revise_data + 4 * 12);
    216          //        Kdx = *(float *)(revise_data + 4 *13);
    217          //        
    218          //        Ky = *(float *)(revise_data + 4 * 14);
    219          //        Kiy = *(float *)(revise_data + 4 * 15);
    220          //        Kdy = *(float *)(revise_data + 4 * 16);
    221          //        
    222          //        Kp1 = *(float *)(revise_data + 4 * 17);
    223          //        Ki1 = *(float *)(revise_data + 4 * 18);
    224          //        Kd1 = *(float *)(revise_data + 4 * 19);   
    225          //        j = 0;
    226          //        revise_flag = 0;
    227          //        Initial_flag = true;
    228          //        
    229          //        uart_send1 (UART1, Initial_Ok);
    230          //        uart_send1 (UART1, Initial_Ok);
    231          //        uart_send1 (UART1, Initial_Ok);//初始化完成
    232          //        LED3_OFF;
    233          //    }
    234          //
    235          //    
    236          //        
    237          //    
    238          //    
    239          //    if(revise_flag == 0 )
    240          //    {
    241          //        if(ch == Revise_First_Frame) revise_flag = 1;
    242          //        else           revise_flag = 0;
    243          //    }
    244          //    else if (revise_flag == 1 )
    245          //    {
    246          //        if(ch == Revise_End_Frame) revise_flag = 2;
    247          //        else           revise_flag = 0;
    248          //    }
    249          //  }
    250          ////////////////////////////////////////////////////////////////////////////////    
    251          //////////////////////////判断发送数据命令//////////////////////////////////////
    252          // if(Stop_flag == true)
    253          // {
    254          //    if(send_data_flag = 0 && ch == 0xaa)send_data_flag = 1;
    255          //    else if(send_data_flag = 1 && ch == 0x4a)send_data_flag = 2;
    256          //    else if(send_data_flag = 2 && ch == 0x06)send_data_flag = 3;
    257          //    else if(send_data_flag = 3 && ch == 0xbb)
    258          //    {
    259          //      send_data_flag = 0;
    260          //      Send_flag = true;
    261          //    }
    262          //   else send_data_flag = 0;
    263          // }
    264          ////////////////////////////////////////////////////////////////////////////////    
    265          //////////////////////////////控制命令//////////////////////////////////////////
    266              if(data_flag == 0 && revise_flag == 0 && data_finish == true && rev_data_fish == true)
   \   0000001E   0x....             LDR.N    R0,??DataTable4_8
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x....             LDR.N    R1,??DataTable4_9
   \   00000024   0x7809             LDRB     R1,[R1, #+0]
   \   00000026   0x4308             ORRS     R0,R1,R0
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xF040 0x80B8      BNE.W    ??uart1_isr_1
   \   00000030   0x....             LDR.N    R0,??DataTable4_10
   \   00000032   0x7800             LDRB     R0,[R0, #+0]
   \   00000034   0x....             LDR.N    R1,??DataTable4_11
   \   00000036   0x7809             LDRB     R1,[R1, #+0]
   \   00000038   0x4208             TST      R0,R1
   \   0000003A   0xF000 0x80B1      BEQ.W    ??uart1_isr_1
    267              {
    268                  switch( ch )
   \   0000003E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000042   0x2867             CMP      R0,#+103
   \   00000044   0xD034             BEQ.N    ??uart1_isr_2
   \   00000046   0x2869             CMP      R0,#+105
   \   00000048   0xD02E             BEQ.N    ??uart1_isr_3
   \   0000004A   0x286B             CMP      R0,#+107
   \   0000004C   0xD028             BEQ.N    ??uart1_isr_4
   \   0000004E   0x286C             CMP      R0,#+108
   \   00000050   0xD01E             BEQ.N    ??uart1_isr_5
   \   00000052   0x286D             CMP      R0,#+109
   \   00000054   0xD018             BEQ.N    ??uart1_isr_6
   \   00000056   0x286E             CMP      R0,#+110
   \   00000058   0xD01E             BEQ.N    ??uart1_isr_7
   \   0000005A   0x286F             CMP      R0,#+111
   \   0000005C   0xD010             BEQ.N    ??uart1_isr_8
   \   0000005E   0x2870             CMP      R0,#+112
   \   00000060   0xF040 0x809E      BNE.W    ??uart1_isr_1
    269                  {
    270                  case 0x70 :
    271                      Stop_flag = true;
   \                     ??uart1_isr_9:
   \   00000064   0x....             LDR.N    R0,??DataTable4_3
   \   00000066   0x2101             MOVS     R1,#+1
   \   00000068   0x7001             STRB     R1,[R0, #+0]
    272                      POWER_OFF;
   \   0000006A   0xF44F 0x737A      MOV      R3,#+1000
   \   0000006E   0xF44F 0x727A      MOV      R2,#+1000
   \   00000072   0xF44F 0x717A      MOV      R1,#+1000
   \   00000076   0xF44F 0x707A      MOV      R0,#+1000
   \   0000007A   0x.... 0x....      BL       set_pwm
    273                      break;//停止
   \   0000007E   0xE08F             B.N      ??uart1_isr_1
    274                  case 0x6F :
    275                      Landing   = true;
   \                     ??uart1_isr_8:
   \   00000080   0x....             LDR.N    R0,??DataTable4_12
   \   00000082   0x2101             MOVS     R1,#+1
   \   00000084   0x7001             STRB     R1,[R0, #+0]
    276                      break;//缓慢降落
   \   00000086   0xE08B             B.N      ??uart1_isr_1
    277                  case 0x6D :
    278                      Start_flag  = true;
   \                     ??uart1_isr_6:
   \   00000088   0x....             LDR.N    R0,??DataTable4_13
   \   0000008A   0x2101             MOVS     R1,#+1
   \   0000008C   0x7001             STRB     R1,[R0, #+0]
    279                      break;//握手信号
   \   0000008E   0xE087             B.N      ??uart1_isr_1
    280                  case 0x6c :
    281                      Backup_landing  = true;
   \                     ??uart1_isr_5:
   \   00000090   0x....             LDR.N    R0,??DataTable4_14
   \   00000092   0x2101             MOVS     R1,#+1
   \   00000094   0x7001             STRB     R1,[R0, #+0]
    282                      break;
   \   00000096   0xE083             B.N      ??uart1_isr_1
    283                  case FreeMode ://6e
    284                      Fly_Mode = FreeMode;
   \                     ??uart1_isr_7:
   \   00000098   0x....             LDR.N    R0,??DataTable4_15
   \   0000009A   0x216E             MOVS     R1,#+110
   \   0000009C   0x7001             STRB     R1,[R0, #+0]
    285                      break;
   \   0000009E   0xE07F             B.N      ??uart1_isr_1
    286                  case 0x6b:
    287                      startMotion = true;
   \                     ??uart1_isr_4:
   \   000000A0   0x....             LDR.N    R0,??DataTable4_16
   \   000000A2   0x2101             MOVS     R1,#+1
   \   000000A4   0x7001             STRB     R1,[R0, #+0]
    288                      break;
   \   000000A6   0xE07B             B.N      ??uart1_isr_1
    289                  case 0x69:
    290                    send_data =true;//开始发数据
   \                     ??uart1_isr_3:
   \   000000A8   0x....             LDR.N    R0,??DataTable4_17
   \   000000AA   0x2101             MOVS     R1,#+1
   \   000000AC   0x7001             STRB     R1,[R0, #+0]
    291                    break;
   \   000000AE   0xE077             B.N      ??uart1_isr_1
    292                  case 0x67:
    293                    send_data = false;//停止发数据
   \                     ??uart1_isr_2:
   \   000000B0   0x....             LDR.N    R0,??DataTable4_17
   \   000000B2   0x2100             MOVS     R1,#+0
   \   000000B4   0x7001             STRB     R1,[R0, #+0]
    294                    break;
   \   000000B6   0xE073             B.N      ??uart1_isr_1
    295          
    296                  }
    297              }
    298             }
    299             
    300             else   //其余为舵机控制信号
    301             {  
    302                  //接收数据缓冲区
    303                  for(int i=0;i<3;i++)
   \                     ??uart1_isr_0:
   \   000000B8   0x2000             MOVS     R0,#+0
   \   000000BA   0xE005             B.N      ??uart1_isr_10
    304                  rec0[i]=rec0[i+1];//接收数据更新
   \                     ??uart1_isr_11:
   \   000000BC   0x....             LDR.N    R1,??DataTable4_18
   \   000000BE   0x1841             ADDS     R1,R0,R1
   \   000000C0   0x7849             LDRB     R1,[R1, #+1]
   \   000000C2   0x....             LDR.N    R2,??DataTable4_18
   \   000000C4   0x5481             STRB     R1,[R0, R2]
   \   000000C6   0x1C40             ADDS     R0,R0,#+1
   \                     ??uart1_isr_10:
   \   000000C8   0x2803             CMP      R0,#+3
   \   000000CA   0xDBF7             BLT.N    ??uart1_isr_11
    305                  rec0[3]=ch;
   \   000000CC   0x....             LDR.N    R0,??DataTable4_18
   \   000000CE   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000000D2   0x70C1             STRB     R1,[R0, #+3]
    306          
    307                  if(255==rec0[0])
   \   000000D4   0x....             LDR.N    R0,??DataTable4_18
   \   000000D6   0x7800             LDRB     R0,[R0, #+0]
   \   000000D8   0x28FF             CMP      R0,#+255
   \   000000DA   0xD161             BNE.N    ??uart1_isr_1
    308                  {
    309                    if(rec0[1]>95)
   \   000000DC   0x....             LDR.N    R0,??DataTable4_18
   \   000000DE   0x7840             LDRB     R0,[R0, #+1]
   \   000000E0   0x2860             CMP      R0,#+96
   \   000000E2   0xD303             BCC.N    ??uart1_isr_12
    310                    {
    311                      rec0[1]=rec0[1];
   \   000000E4   0x....             LDR.N    R0,??DataTable4_18
   \   000000E6   0x....             LDR.N    R1,??DataTable4_18
   \   000000E8   0x7849             LDRB     R1,[R1, #+1]
   \   000000EA   0x7041             STRB     R1,[R0, #+1]
    312                    }
    313                    if(rec0[2]>95)
   \                     ??uart1_isr_12:
   \   000000EC   0x....             LDR.N    R0,??DataTable4_18
   \   000000EE   0x7880             LDRB     R0,[R0, #+2]
   \   000000F0   0x2860             CMP      R0,#+96
   \   000000F2   0xD303             BCC.N    ??uart1_isr_13
    314                    {
    315                      rec0[2]=rec0[2];
   \   000000F4   0x....             LDR.N    R0,??DataTable4_18
   \   000000F6   0x....             LDR.N    R1,??DataTable4_18
   \   000000F8   0x7889             LDRB     R1,[R1, #+2]
   \   000000FA   0x7081             STRB     R1,[R0, #+2]
    316                    }
    317                    if(253==rec0[3])
   \                     ??uart1_isr_13:
   \   000000FC   0x....             LDR.N    R0,??DataTable4_18
   \   000000FE   0x78C0             LDRB     R0,[R0, #+3]
   \   00000100   0x28FD             CMP      R0,#+253
   \   00000102   0xD108             BNE.N    ??uart1_isr_14
    318                    {
    319                      re_X=rec0[1];
   \   00000104   0x....             LDR.N    R0,??DataTable4_18
   \   00000106   0x7840             LDRB     R0,[R0, #+1]
   \   00000108   0x....             LDR.N    R1,??DataTable4_19
   \   0000010A   0x6008             STR      R0,[R1, #+0]
    320                      re_Y=rec0[2];
   \   0000010C   0x....             LDR.N    R0,??DataTable4_18
   \   0000010E   0x7880             LDRB     R0,[R0, #+2]
   \   00000110   0x....             LDR.N    R1,??DataTable4_20
   \   00000112   0x6008             STR      R0,[R1, #+0]
   \   00000114   0xE039             B.N      ??uart1_isr_15
    321                    }
    322                    else if(252==rec0[3])
   \                     ??uart1_isr_14:
   \   00000116   0x....             LDR.N    R0,??DataTable4_18
   \   00000118   0x78C0             LDRB     R0,[R0, #+3]
   \   0000011A   0x28FC             CMP      R0,#+252
   \   0000011C   0xD10D             BNE.N    ??uart1_isr_16
    323                    {
    324                      re_X=rec0[1];
   \   0000011E   0x....             LDR.N    R0,??DataTable4_18
   \   00000120   0x7840             LDRB     R0,[R0, #+1]
   \   00000122   0x....             LDR.N    R1,??DataTable4_19
   \   00000124   0x6008             STR      R0,[R1, #+0]
    325                      re_X=-re_X;
   \   00000126   0x....             LDR.N    R0,??DataTable4_19
   \   00000128   0x....             LDR.N    R1,??DataTable4_19
   \   0000012A   0x6809             LDR      R1,[R1, #+0]
   \   0000012C   0x4249             RSBS     R1,R1,#+0
   \   0000012E   0x6001             STR      R1,[R0, #+0]
    326                      re_Y=rec0[2];
   \   00000130   0x....             LDR.N    R0,??DataTable4_18
   \   00000132   0x7880             LDRB     R0,[R0, #+2]
   \   00000134   0x....             LDR.N    R1,??DataTable4_20
   \   00000136   0x6008             STR      R0,[R1, #+0]
   \   00000138   0xE027             B.N      ??uart1_isr_15
    327                    }
    328                    else if(251==rec0[3])
   \                     ??uart1_isr_16:
   \   0000013A   0x....             LDR.N    R0,??DataTable4_18
   \   0000013C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000013E   0x28FB             CMP      R0,#+251
   \   00000140   0xD10D             BNE.N    ??uart1_isr_17
    329                    {
    330                      re_X=rec0[1];
   \   00000142   0x....             LDR.N    R0,??DataTable4_18
   \   00000144   0x7840             LDRB     R0,[R0, #+1]
   \   00000146   0x....             LDR.N    R1,??DataTable4_19
   \   00000148   0x6008             STR      R0,[R1, #+0]
    331                      re_Y=rec0[2];
   \   0000014A   0x....             LDR.N    R0,??DataTable4_18
   \   0000014C   0x7880             LDRB     R0,[R0, #+2]
   \   0000014E   0x....             LDR.N    R1,??DataTable4_20
   \   00000150   0x6008             STR      R0,[R1, #+0]
    332                      re_Y=-re_Y;
   \   00000152   0x....             LDR.N    R0,??DataTable4_20
   \   00000154   0x....             LDR.N    R1,??DataTable4_20
   \   00000156   0x6809             LDR      R1,[R1, #+0]
   \   00000158   0x4249             RSBS     R1,R1,#+0
   \   0000015A   0x6001             STR      R1,[R0, #+0]
   \   0000015C   0xE015             B.N      ??uart1_isr_15
    333                    }
    334                    else if(250==rec0[3])
   \                     ??uart1_isr_17:
   \   0000015E   0x....             LDR.N    R0,??DataTable4_18
   \   00000160   0x78C0             LDRB     R0,[R0, #+3]
   \   00000162   0x28FA             CMP      R0,#+250
   \   00000164   0xD111             BNE.N    ??uart1_isr_15
    335                    {
    336                      re_X=rec0[1];
   \   00000166   0x....             LDR.N    R0,??DataTable4_18
   \   00000168   0x7840             LDRB     R0,[R0, #+1]
   \   0000016A   0x....             LDR.N    R1,??DataTable4_19
   \   0000016C   0x6008             STR      R0,[R1, #+0]
    337                      re_Y=rec0[2];
   \   0000016E   0x....             LDR.N    R0,??DataTable4_18
   \   00000170   0x7880             LDRB     R0,[R0, #+2]
   \   00000172   0x....             LDR.N    R1,??DataTable4_20
   \   00000174   0x6008             STR      R0,[R1, #+0]
    338                      re_X=-re_X;
   \   00000176   0x....             LDR.N    R0,??DataTable4_19
   \   00000178   0x....             LDR.N    R1,??DataTable4_19
   \   0000017A   0x6809             LDR      R1,[R1, #+0]
   \   0000017C   0x4249             RSBS     R1,R1,#+0
   \   0000017E   0x6001             STR      R1,[R0, #+0]
    339                      re_Y=-re_Y;
   \   00000180   0x....             LDR.N    R0,??DataTable4_20
   \   00000182   0x....             LDR.N    R1,??DataTable4_20
   \   00000184   0x6809             LDR      R1,[R1, #+0]
   \   00000186   0x4249             RSBS     R1,R1,#+0
   \   00000188   0x6001             STR      R1,[R0, #+0]
    340                    }
    341                    for(int j=0;j<4;j++)//读取数据后缓冲区清零
   \                     ??uart1_isr_15:
   \   0000018A   0x2000             MOVS     R0,#+0
   \   0000018C   0xE003             B.N      ??uart1_isr_18
    342                    {
    343                        rec0[j]=0;
   \                     ??uart1_isr_19:
   \   0000018E   0x....             LDR.N    R1,??DataTable4_18
   \   00000190   0x2200             MOVS     R2,#+0
   \   00000192   0x5442             STRB     R2,[R0, R1]
    344                    }
   \   00000194   0x1C40             ADDS     R0,R0,#+1
   \                     ??uart1_isr_18:
   \   00000196   0x2804             CMP      R0,#+4
   \   00000198   0xDBF9             BLT.N    ??uart1_isr_19
    345                    signal_target=true;
   \   0000019A   0x....             LDR.N    R0,??DataTable4_21
   \   0000019C   0x2101             MOVS     R1,#+1
   \   0000019E   0x7001             STRB     R1,[R0, #+0]
    346                  }
    347          //        if(255==rec0[0]&&254==rec0[5])
    348          //        {
    349          //          if(0!=rec0[1])
    350          //          {
    351          //            re_X=rec0[1];
    352          //          }
    353          //          else
    354          //          {
    355          //            re_X=-rec0[2];
    356          //          }
    357          //          if(0!=rec0[3])
    358          //          {
    359          //            re_Y=rec0[3];
    360          //          }
    361          //          else
    362          //          {
    363          //            re_Y=-rec0[4];
    364          //          }
    365          //          for(int j=0;j<6;j++)//读取数据后缓冲区清零
    366          //          {
    367          //             rec0[j]=0;
    368          //          }
    369          //          signal_target=true;
    370          //          
    371          //        }
    372          //        else if(253==rec0[0])
    373          //        {
    374          //            targetlosetime++;
    375          //            if(targetlosetime==10)
    376          //            {
    377          //              //signal_target=false;
    378          //              targetlosetime=0;
    379          //            }
    380          //        }
    381          
    382          //        send0[0]=255;
    383          //        if(PointX>=0)
    384          //          {
    385          //            send0[1]=(uint8)PointX;
    386          //          }
    387          //          else
    388          //          {
    389          //            send0[2]=(uint8)-PointX;
    390          //          }
    391          //        if(PointY>=0)
    392          //          {
    393          //            send0[3]=(uint8)PointY;
    394          //          }
    395          //          else
    396          //          {
    397          //            send0[4]=(uint8)-PointY;
    398          //          }
    399          //        send0[5]=254;
    400          //        
    401          //          uart_send1 (UART1, send0[buff_counter]);
    402          //          buff_counter++;
    403          //          if(buff_counter==6)buff_counter=0;
    404             }
    405            
    406             
    407                  
    408          }
   \                     ??uart1_isr_1:
   \   000001A0   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 1
   \                     ??data_flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     ??rec0:
   \   00000000                      DS8 4

   \                                 In section .data, align 1
   \                     ??data_finish:
   \   00000000   0x01               DC8 1

   \                                 In section .data, align 1
   \                     ??rev_data_fish:
   \   00000000   0x01               DC8 1

   \                                 In section .bss, align 1
   \                     ??revise_flag:
   \   00000000                      DS8 1
    409          //==========================================================================
    410          //函数名称：pit0_isr
    411          //功能概要：中断例程
    412          //参数说明：无
    413          //函数返回：无
    414          //==========================================================================

   \                                 In section .text, align 2, keep-with-next
    415          void pit0_isr(void)
    416          {
   \                     pit0_isr:
   \   00000000   0xB580             PUSH     {R7,LR}
    417              //DisableInterrupts;	                                //关总中断
    418              PIT_TFLG(0) |= PIT_TFLG_TIF_MASK; //清中断标志
   \   00000002   0x....             LDR.N    R0,??DataTable4_22  ;; 0x4003710c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000000A   0x....             LDR.N    R1,??DataTable4_22  ;; 0x4003710c
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    419              Pit_update = true;
   \   0000000E   0x....             LDR.N    R0,??DataTable4_23
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0x7001             STRB     R1,[R0, #+0]
    420          
    421              Time_counter ++ ;
   \   00000014   0x....             LDR.N    R0,??DataTable4_24
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x1C40             ADDS     R0,R0,#+1
   \   0000001A   0x....             LDR.N    R1,??DataTable4_24
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    422          
    423          
    424              if(Time_counter <= COUNTER)                      //数据初始化完成开始
   \   0000001E   0x....             LDR.N    R0,??DataTable4_24
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   00000026   0xD807             BHI.N    ??pit0_isr_0
    425              {
    426                  ReadMPU3205();
   \   00000028   0x.... 0x....      BL       ReadMPU3205
    427                  ReadBMA180();
   \   0000002C   0x.... 0x....      BL       ReadBMA180
    428                  ReadMPUsteer();
   \   00000030   0x.... 0x....      BL       ReadMPUsteer
    429                  ReadBMAsteer();
   \   00000034   0x.... 0x....      BL       ReadBMAsteer
    430                  //read_hmc5883l();
    431                  //read_L3G4200D();
    432                  //read_ADXL345();
    433              }
    434          }
   \                     ??pit0_isr_0:
   \   00000038   0xBD01             POP      {R0,PC}          ;; return
    435          

   \                                 In section .text, align 2, keep-with-next
    436          void PORTE_isr(void)
    437          {
   \                     PORTE_isr:
   \   00000000   0xB510             PUSH     {R4,LR}
    438              uint32 timer_count = 0;
   \   00000002   0x2400             MOVS     R4,#+0
    439              uint16 hight = 0;
   \   00000004   0x2000             MOVS     R0,#+0
    440              uint32 time = 0;
   \   00000006   0x2100             MOVS     R1,#+0
    441              static uint32 s_time = 0, r_time = 0;
    442            
    443              //PORTE_ISFR
    444          
    445              timer_count = PIT_CVAL(1);
   \   00000008   0x....             LDR.N    R2,??DataTable4_25  ;; 0x40037114
   \   0000000A   0x6812             LDR      R2,[R2, #+0]
   \   0000000C   0x0014             MOVS     R4,R2
    446              irq_counter++;
   \   0000000E   0x....             LDR.N    R2,??DataTable4_26
   \   00000010   0x7812             LDRB     R2,[R2, #+0]
   \   00000012   0x1C52             ADDS     R2,R2,#+1
   \   00000014   0x....             LDR.N    R3,??DataTable4_26
   \   00000016   0x701A             STRB     R2,[R3, #+0]
    447              if(irq_counter == 1)
   \   00000018   0x....             LDR.N    R2,??DataTable4_26
   \   0000001A   0x7812             LDRB     R2,[R2, #+0]
   \   0000001C   0x2A01             CMP      R2,#+1
   \   0000001E   0xD102             BNE.N    ??PORTE_isr_0
    448              {
    449                  s_time = timer_count;
   \   00000020   0x....             LDR.N    R0,??DataTable4_27
   \   00000022   0x6004             STR      R4,[R0, #+0]
   \   00000024   0xE023             B.N      ??PORTE_isr_1
    450              }
    451              else if(irq_counter == 2)
   \                     ??PORTE_isr_0:
   \   00000026   0x....             LDR.N    R0,??DataTable4_26
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0x2802             CMP      R0,#+2
   \   0000002C   0xD11F             BNE.N    ??PORTE_isr_1
    452              {
    453                  LED1_Change;
   \   0000002E   0x2103             MOVS     R1,#+3
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       hw_gpio_reverse
    454                  irq_counter = 0;
   \   00000036   0x....             LDR.N    R0,??DataTable4_26
   \   00000038   0x2100             MOVS     R1,#+0
   \   0000003A   0x7001             STRB     R1,[R0, #+0]
    455                  r_time = timer_count;
   \   0000003C   0x....             LDR.N    R0,??DataTable4_28
   \   0000003E   0x6004             STR      R4,[R0, #+0]
    456                  time =  (s_time - r_time) * 1000 / periph_clk_khz; //微秒us
   \   00000040   0x....             LDR.N    R0,??DataTable4_27
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0x....             LDR.N    R1,??DataTable4_28
   \   00000046   0x6809             LDR      R1,[R1, #+0]
   \   00000048   0x1A40             SUBS     R0,R0,R1
   \   0000004A   0xF44F 0x717A      MOV      R1,#+1000
   \   0000004E   0x4348             MULS     R0,R1,R0
   \   00000050   0x....             LDR.N    R1,??DataTable4_29
   \   00000052   0x6809             LDR      R1,[R1, #+0]
   \   00000054   0xFBB0 0xF1F1      UDIV     R1,R0,R1
    457                  hight = time  / 58 ;                               //时间(微秒)除以58就是距离(厘米)
   \   00000058   0x203A             MOVS     R0,#+58
   \   0000005A   0xFBB1 0xF0F0      UDIV     R0,R1,R0
    458                  if(hight < 250 )
   \   0000005E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000060   0x28FA             CMP      R0,#+250
   \   00000062   0xD204             BCS.N    ??PORTE_isr_1
    459                  {
    460                      Height_update = true;
   \   00000064   0x....             LDR.N    R1,??DataTable4_30
   \   00000066   0x2201             MOVS     R2,#+1
   \   00000068   0x700A             STRB     R2,[R1, #+0]
    461                      Height = hight;
   \   0000006A   0x....             LDR.N    R1,??DataTable4_31
   \   0000006C   0x8008             STRH     R0,[R1, #+0]
    462                  }
    463              }
    464          }
   \                     ??PORTE_isr_1:
   \   0000006E   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .bss, align 4
   \                     ??s_time:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??r_time:
   \   00000000                      DS8 4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     data_high

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     datas_mid

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x4006A000         DC32     0x4006a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     Stop_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     ??send_data_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     Send_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x4006B000         DC32     0x4006b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     CH

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     ??data_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     ??revise_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     ??data_finish

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x........         DC32     ??rev_data_fish

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x........         DC32     Landing

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x........         DC32     Start_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0x........         DC32     Backup_landing

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   0x........         DC32     Fly_Mode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   0x........         DC32     startMotion

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   0x........         DC32     send_data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   0x........         DC32     ??rec0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   0x........         DC32     re_X

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_20:
   \   00000000   0x........         DC32     re_Y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_21:
   \   00000000   0x........         DC32     signal_target

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_22:
   \   00000000   0x4003710C         DC32     0x4003710c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_23:
   \   00000000   0x........         DC32     Pit_update

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_24:
   \   00000000   0x........         DC32     Time_counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_25:
   \   00000000   0x40037114         DC32     0x40037114

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_26:
   \   00000000   0x........         DC32     irq_counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_27:
   \   00000000   0x........         DC32     ??s_time

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_28:
   \   00000000   0x........         DC32     ??r_time

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_29:
   \   00000000   0x........         DC32     periph_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_30:
   \   00000000   0x........         DC32     Height_update

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_31:
   \   00000000   0x........         DC32     Height
    465          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  PORTE_isr
              8 -> hw_gpio_reverse
       16  median
             16 -> __aeabi_cfcmple
        8  pit0_isr
              8 -> ReadBMA180
              8 -> ReadBMAsteer
              8 -> ReadMPU3205
              8 -> ReadMPUsteer
        8  uart0_isr
              8 -> print_pixel_data
              8 -> uart_re1
        8  uart1_isr
              8 -> set_pwm
              8 -> uart_re1


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_18
       4  ??DataTable4_19
       4  ??DataTable4_2
       4  ??DataTable4_20
       4  ??DataTable4_21
       4  ??DataTable4_22
       4  ??DataTable4_23
       4  ??DataTable4_24
       4  ??DataTable4_25
       4  ??DataTable4_26
       4  ??DataTable4_27
       4  ??DataTable4_28
       4  ??DataTable4_29
       4  ??DataTable4_3
       4  ??DataTable4_30
       4  ??DataTable4_31
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       1  Axis_update
       8  Axis_x
       8  Axis_y
       1  Backup_landing
       2  BaseHeight
       1  CH
       1  Clear
       1  Debug_Mode
       1  Fly_Mode
       2  Height
       1  Height_update
       4  High
       1  Initial_flag
       1  Landing
     112  PORTE_isr
       1  Pit_update
       2  Pwm_h
       1  Send_flag
       1  Start_flag
       1  Stop_flag
       4  Time_counter
       4  c_revise_x
       4  c_revise_y
       1  data_finish
       1  data_flag
      28  data_high
      28  datas_mid
       1  irq_counter
       2  isrcounter
     222  median
       1  motionState
      58  pit0_isr
       4  r_time
       4  re_X
       4  re_Y
       4  rec0
       1  rev_data_fish
       1  revise_flag
       4  revise_x
       4  revise_y
       4  s_time
       1  send_data
       1  send_data_flag
       1  signal_target
       4  signal_x
       4  signal_y
       1  startMotion
     172  uart0_isr
     418  uart1_isr

 
   150 bytes in section .bss
     5 bytes in section .data
 1 110 bytes in section .text
 
 1 110 bytes of CODE memory
   155 bytes of DATA memory

Errors: none
Warnings: 2
