###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     03/Aug/2015  09:48:04 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Thinkpad\Desktop\quadrotor150720飞行器跟随小车( #
#                    改I2C)\src\Sources\C\Component_C\HAL_GPIO.c              #
#    Command line =  "C:\Users\Thinkpad\Desktop\quadrotor150720飞行器跟随小车 #
#                    (改I2C)\src\Sources\C\Component_C\HAL_GPIO.c" -D IAR -D  #
#                    TWR_K60N512 -lCN "C:\Users\Thinkpad\Desktop\quadrotor150 #
#                    720飞行器跟随小车(改I2C)\bin\Flash\List\" -lB            #
#                    "C:\Users\Thinkpad\Desktop\quadrotor150720飞行器跟随小车 #
#                    (改I2C)\bin\Flash\List\" -o                              #
#                    "C:\Users\Thinkpad\Desktop\quadrotor150720飞行器跟随小车 #
#                    (改I2C)\bin\Flash\Obj\" --no_cse --no_unroll             #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "E:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "C:\Users\Thinkpad\Desktop\quadrotor150720飞行 #
#                    器跟随小车(改I2C)\src\Sources\H\" -I                     #
#                    "C:\Users\Thinkpad\Desktop\quadrotor150720飞行器跟随小车 #
#                    (改I2C)\src\Sources\H\Component_H\" -I                   #
#                    "C:\Users\Thinkpad\Desktop\quadrotor150720飞行器跟随小车 #
#                    (改I2C)\src\Sources\H\Frame_H\" -Ol --use_c++_inline     #
#    List file    =  C:\Users\Thinkpad\Desktop\quadrotor150720飞行器跟随小车( #
#                    改I2C)\bin\Flash\List\HAL_GPIO.lst                       #
#    Object file  =  C:\Users\Thinkpad\Desktop\quadrotor150720飞行器跟随小车( #
#                    改I2C)\bin\Flash\Obj\HAL_GPIO.o                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Thinkpad\Desktop\quadrotor150720飞行器跟随小车(改I2C)\src\Sources\C\Component_C\HAL_GPIO.c
      1          /*
      2           * 测试硬件平台:LPLD_K60 Card
      3           * 版权所有:北京拉普兰德电子技术有限公司
      4           * 网络销售:http://laplenden.taobao.com
      5           * 公司门户:http://www.lpld.cn
      6           *
      7           * 文件名: HAL_GPIO.c
      8           * 用途: GPIO底层模块相关函数
      9           * 最后修改日期: 20120321
     10           *
     11           * 开发者使用协议:
     12           *  本代码面向所有使用者开放源代码，开发者可以随意修改源代码。但本段及以上注释应
     13           *  予以保留，不得更改或删除原版权所有者姓名。二次开发者可以加注二次版权所有者，
     14           *  但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     15           */
     16          /*
     17           *******需用到GPIO中断，请在isr.h中粘贴一下代码:*********
     18          
     19          //GPIO模块中断服务定义
     20          #undef  VECTOR_103
     21          #define VECTOR_103 LPLD_GPIO_Isr
     22          #undef  VECTOR_104
     23          #define VECTOR_104 LPLD_GPIO_Isr
     24          #undef  VECTOR_105
     25          #define VECTOR_105 LPLD_GPIO_Isr
     26          #undef  VECTOR_106
     27          #define VECTOR_106 LPLD_GPIO_Isr
     28          #undef  VECTOR_107
     29          #define VECTOR_107 LPLD_GPIO_Isr
     30          //以下函数在LPLD_Kinetis底层包，不必修改
     31          extern void LPLD_GPIO_Isr(void);
     32          
     33           ***********************代码结束*************************
     34          */
     35          
     36          #include "common.h"
     37          #include "HAL_GPIO.h"
     38          
     39          
     40          //用户自定义中断服务函数数组

   \                                 In section .bss, align 4
     41          GPIO_ISR_CALLBACK GPIO_ISR[5];
   \                     GPIO_ISR:
   \   00000000                      DS8 20
     42          
     43          /*
     44           * LPLD_GPIO_Init
     45           * GPIO通用初始化函数
     46           * 
     47           * 参数:
     48           *    port--端口基地址
     49           *      |__PORTA_BASE_PTR--Port A
     50           *      |__PORTB_BASE_PTR--Port B
     51           *      |__PORTC_BASE_PTR--Port C
     52           *      |__PORTD_BASE_PTR--Port D
     53           *      |__PORTE_BASE_PTR--Port E
     54           *    port_bit--端口位数
     55           *      |__0~31
     56           *    dir--端口数据方向
     57           *      |__1--输出
     58           *      |__0--输入
     59           *    data--输出初始电平/输入上拉或下拉
     60           *      |__2--如果dir=0,输入内部下拉
     61           *      |__1--如果dir=0,输入内部上拉; 如果dir=1,输出高电平
     62           *      |__0--如果dir=0,输入不使能上下拉; 如果dir=1,输出低电平
     63           *    irqc--输入中断
     64           *      |__0--不使能中断
     65           *      |__其他--见技术文档 PORTx_PCRn寄存器 IRQC位描述 1001上升 1010下降 1011上升下降
     66           *
     67           * 输出:
     68           *    0--配置错误
     69           *    1--配置成功
     70           */

   \                                 In section .text, align 2, keep-with-next
     71          uint8_t LPLD_GPIO_Init(PORT_MemMapPtr port, uint8_t port_bit, uint8_t dir, uint8_t data, uint8_t irqc)
     72          {
   \                     LPLD_GPIO_Init:
   \   00000000   0xB470             PUSH     {R4-R6}
     73            GPIO_MemMapPtr p;
     74            //判断端口位数合理性
     75            if(port_bit>31)
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2920             CMP      R1,#+32
   \   00000006   0xD301             BCC.N    ??LPLD_GPIO_Init_0
     76              return 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xE086             B.N      ??LPLD_GPIO_Init_1
     77            
     78            //选择IO口时钟控制掩码
     79            if(port == PORTA_BASE_PTR)
   \                     ??LPLD_GPIO_Init_0:
   \   0000000C   0x....             LDR.N    R4,??DataTable2  ;; 0x40049000
   \   0000000E   0x42A0             CMP      R0,R4
   \   00000010   0xD11A             BNE.N    ??LPLD_GPIO_Init_2
     80            {
     81              p = PTA_BASE_PTR; 
   \   00000012   0x....             LDR.N    R4,??DataTable2_1  ;; 0x400ff000
     82              SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK; 
   \   00000014   0x....             LDR.N    R5,??DataTable2_2  ;; 0x40048038
   \   00000016   0x682D             LDR      R5,[R5, #+0]
   \   00000018   0xF455 0x7500      ORRS     R5,R5,#0x200
   \   0000001C   0x....             LDR.N    R6,??DataTable2_2  ;; 0x40048038
   \   0000001E   0x6035             STR      R5,[R6, #+0]
     83            }
     84            else if(port == PORTB_BASE_PTR)
     85            {
     86              p = PTB_BASE_PTR; 
     87              SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK; 
     88            }
     89            else if(port == PORTC_BASE_PTR)
     90            {
     91              p = PTC_BASE_PTR; 
     92              SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK; 
     93            }
     94            else if(port == PORTD_BASE_PTR)
     95            {
     96              p = PTD_BASE_PTR; 
     97              SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK; 
     98            }
     99            else if(port == PORTE_BASE_PTR)
    100            {
    101              p = PTE_BASE_PTR; 
    102              SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK; 
    103            }
    104            else
    105            {
    106              return 0;
    107            }
    108            //配置为GPIO功能
    109            PORT_PCR_REG(port, port_bit) = PORT_PCR_MUX(1);
   \                     ??LPLD_GPIO_Init_3:
   \   00000020   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   0xF44F 0x7580      MOV      R5,#+256
   \   00000026   0xF840 0x5021      STR      R5,[R0, R1, LSL #+2]
    110            //输入或输出设置
    111            if(dir==1)
   \   0000002A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000002C   0x2A01             CMP      R2,#+1
   \   0000002E   0xD13D             BNE.N    ??LPLD_GPIO_Init_4
    112            {
    113              GPIO_PDDR_REG(p) |= 0x1u<<port_bit;
   \   00000030   0x6960             LDR      R0,[R4, #+20]
   \   00000032   0x2201             MOVS     R2,#+1
   \   00000034   0x408A             LSLS     R2,R2,R1
   \   00000036   0x4310             ORRS     R0,R2,R0
   \   00000038   0x6160             STR      R0,[R4, #+20]
    114              //设置初始输出
    115              if(data==1)
   \   0000003A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000003C   0x2B01             CMP      R3,#+1
   \   0000003E   0xD131             BNE.N    ??LPLD_GPIO_Init_5
    116              {
    117                GPIO_PSOR_REG(p) = 0x1u<<port_bit; 
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0x4088             LSLS     R0,R0,R1
   \   00000044   0x6060             STR      R0,[R4, #+4]
   \   00000046   0xE067             B.N      ??LPLD_GPIO_Init_6
    118              }
   \                     ??LPLD_GPIO_Init_2:
   \   00000048   0x....             LDR.N    R4,??DataTable2_3  ;; 0x4004a000
   \   0000004A   0x42A0             CMP      R0,R4
   \   0000004C   0xD107             BNE.N    ??LPLD_GPIO_Init_7
   \   0000004E   0x....             LDR.N    R4,??DataTable2_4  ;; 0x400ff040
   \   00000050   0x....             LDR.N    R5,??DataTable2_2  ;; 0x40048038
   \   00000052   0x682D             LDR      R5,[R5, #+0]
   \   00000054   0xF455 0x6580      ORRS     R5,R5,#0x400
   \   00000058   0x....             LDR.N    R6,??DataTable2_2  ;; 0x40048038
   \   0000005A   0x6035             STR      R5,[R6, #+0]
   \   0000005C   0xE7E0             B.N      ??LPLD_GPIO_Init_3
   \                     ??LPLD_GPIO_Init_7:
   \   0000005E   0x....             LDR.N    R4,??DataTable2_5  ;; 0x4004b000
   \   00000060   0x42A0             CMP      R0,R4
   \   00000062   0xD107             BNE.N    ??LPLD_GPIO_Init_8
   \   00000064   0x....             LDR.N    R4,??DataTable2_6  ;; 0x400ff080
   \   00000066   0x....             LDR.N    R5,??DataTable2_2  ;; 0x40048038
   \   00000068   0x682D             LDR      R5,[R5, #+0]
   \   0000006A   0xF455 0x6500      ORRS     R5,R5,#0x800
   \   0000006E   0x....             LDR.N    R6,??DataTable2_2  ;; 0x40048038
   \   00000070   0x6035             STR      R5,[R6, #+0]
   \   00000072   0xE7D5             B.N      ??LPLD_GPIO_Init_3
   \                     ??LPLD_GPIO_Init_8:
   \   00000074   0x....             LDR.N    R4,??DataTable2_7  ;; 0x4004c000
   \   00000076   0x42A0             CMP      R0,R4
   \   00000078   0xD107             BNE.N    ??LPLD_GPIO_Init_9
   \   0000007A   0x....             LDR.N    R4,??DataTable2_8  ;; 0x400ff0c0
   \   0000007C   0x....             LDR.N    R5,??DataTable2_2  ;; 0x40048038
   \   0000007E   0x682D             LDR      R5,[R5, #+0]
   \   00000080   0xF455 0x5580      ORRS     R5,R5,#0x1000
   \   00000084   0x....             LDR.N    R6,??DataTable2_2  ;; 0x40048038
   \   00000086   0x6035             STR      R5,[R6, #+0]
   \   00000088   0xE7CA             B.N      ??LPLD_GPIO_Init_3
   \                     ??LPLD_GPIO_Init_9:
   \   0000008A   0x....             LDR.N    R4,??DataTable2_9  ;; 0x4004d000
   \   0000008C   0x42A0             CMP      R0,R4
   \   0000008E   0xD107             BNE.N    ??LPLD_GPIO_Init_10
   \   00000090   0x....             LDR.N    R4,??DataTable2_10  ;; 0x400ff100
   \   00000092   0x....             LDR.N    R5,??DataTable2_2  ;; 0x40048038
   \   00000094   0x682D             LDR      R5,[R5, #+0]
   \   00000096   0xF455 0x5500      ORRS     R5,R5,#0x2000
   \   0000009A   0x....             LDR.N    R6,??DataTable2_2  ;; 0x40048038
   \   0000009C   0x6035             STR      R5,[R6, #+0]
   \   0000009E   0xE7BF             B.N      ??LPLD_GPIO_Init_3
   \                     ??LPLD_GPIO_Init_10:
   \   000000A0   0x2000             MOVS     R0,#+0
   \   000000A2   0xE03A             B.N      ??LPLD_GPIO_Init_1
    119              else
    120              {
    121                GPIO_PCOR_REG(p) = 0x1u<<port_bit;  
   \                     ??LPLD_GPIO_Init_5:
   \   000000A4   0x2001             MOVS     R0,#+1
   \   000000A6   0x4088             LSLS     R0,R0,R1
   \   000000A8   0x60A0             STR      R0,[R4, #+8]
   \   000000AA   0xE035             B.N      ??LPLD_GPIO_Init_6
    122              }
    123            }
    124            else
    125            { 
    126              GPIO_PDDR_REG(p) &= ~(0x1u<<port_bit);
   \                     ??LPLD_GPIO_Init_4:
   \   000000AC   0x6962             LDR      R2,[R4, #+20]
   \   000000AE   0x2501             MOVS     R5,#+1
   \   000000B0   0x408D             LSLS     R5,R5,R1
   \   000000B2   0x43AA             BICS     R2,R2,R5
   \   000000B4   0x6162             STR      R2,[R4, #+20]
   \   000000B6   0x9A03             LDR      R2,[SP, #+12]
    127              //配置中断方式
    128              if(irqc>0xC) return 0;
   \   000000B8   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000BA   0x2A0D             CMP      R2,#+13
   \   000000BC   0xD301             BCC.N    ??LPLD_GPIO_Init_11
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0xE02B             B.N      ??LPLD_GPIO_Init_1
    129              PORT_PCR_REG(port, port_bit) |= PORT_PCR_IRQC(irqc); 
   \                     ??LPLD_GPIO_Init_11:
   \   000000C2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000C4   0xF850 0x4021      LDR      R4,[R0, R1, LSL #+2]
   \   000000C8   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000CA   0x0412             LSLS     R2,R2,#+16
   \   000000CC   0xF412 0x2270      ANDS     R2,R2,#0xF0000
   \   000000D0   0x4322             ORRS     R2,R2,R4
   \   000000D2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000D4   0xF840 0x2021      STR      R2,[R0, R1, LSL #+2]
    130              //配置内部上拉或下拉或不使能
    131              if(data==1)
   \   000000D8   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000000DA   0x2B01             CMP      R3,#+1
   \   000000DC   0xD108             BNE.N    ??LPLD_GPIO_Init_12
    132              {
    133                //上拉
    134                PORT_PCR_REG(port, port_bit) |= PORT_PCR_PE_MASK | PORT_PCR_PS_MASK ; 
   \   000000DE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000E0   0xF850 0x2021      LDR      R2,[R0, R1, LSL #+2]
   \   000000E4   0xF052 0x0203      ORRS     R2,R2,#0x3
   \   000000E8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000EA   0xF840 0x2021      STR      R2,[R0, R1, LSL #+2]
   \   000000EE   0xE013             B.N      ??LPLD_GPIO_Init_6
    135              }
    136              else if(data==2)
   \                     ??LPLD_GPIO_Init_12:
   \   000000F0   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000000F2   0x2B02             CMP      R3,#+2
   \   000000F4   0xD108             BNE.N    ??LPLD_GPIO_Init_13
    137              {
    138                //下拉
    139                PORT_PCR_REG(port, port_bit) |= PORT_PCR_PE_MASK ; 
   \   000000F6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000F8   0xF850 0x2021      LDR      R2,[R0, R1, LSL #+2]
   \   000000FC   0xF052 0x0202      ORRS     R2,R2,#0x2
   \   00000100   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000102   0xF840 0x2021      STR      R2,[R0, R1, LSL #+2]
   \   00000106   0xE007             B.N      ??LPLD_GPIO_Init_6
    140              }
    141              else
    142              {
    143                //不使能上下拉
    144                PORT_PCR_REG(port, port_bit) &= ~PORT_PCR_PE_MASK ; 
   \                     ??LPLD_GPIO_Init_13:
   \   00000108   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000010A   0xF850 0x2021      LDR      R2,[R0, R1, LSL #+2]
   \   0000010E   0xF032 0x0202      BICS     R2,R2,#0x2
   \   00000112   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000114   0xF840 0x2021      STR      R2,[R0, R1, LSL #+2]
    145              }
    146            }
    147            
    148            return 1;
   \                     ??LPLD_GPIO_Init_6:
   \   00000118   0x2001             MOVS     R0,#+1
   \                     ??LPLD_GPIO_Init_1:
   \   0000011A   0xBC70             POP      {R4-R6}
   \   0000011C   0x4770             BX       LR               ;; return
    149          }
    150          
    151          /*
    152           * LPLD_GPIO_SetIsr
    153           * 设置GPIO通道用户定义的中断服务函数
    154           * 
    155           * 参数:
    156           *    port--端口基地址
    157           *      |__PORTA_BASE_PTR--Port A
    158           *      |__PORTB_BASE_PTR--Port B
    159           *      |__PORTC_BASE_PTR--Port C
    160           *      |__PORTD_BASE_PTR--Port D
    161           *      |__PORTE_BASE_PTR--Port E
    162           *    isr_func--用户中断程序入口地址
    163           *      |__用户在工程文件下定义的中断函数名，函数必须为:无返回值,无参数(eg. void isr(void);)
    164           *
    165           * 输出:
    166           *    0--配置错误
    167           *    1--配置成功
    168           *
    169           */

   \                                 In section .text, align 2, keep-with-next
    170          uint8_t LPLD_GPIO_SetIsr(PORT_MemMapPtr port, GPIO_ISR_CALLBACK isr_func)
    171          {
    172            //选择IO口
    173            if(port == PORTA_BASE_PTR)
   \                     LPLD_GPIO_SetIsr:
   \   00000000   0x....             LDR.N    R2,??DataTable2  ;; 0x40049000
   \   00000002   0x4290             CMP      R0,R2
   \   00000004   0xD103             BNE.N    ??LPLD_GPIO_SetIsr_0
    174            {
    175              GPIO_ISR[0] = isr_func;
   \   00000006   0x....             LDR.N    R0,??DataTable2_11
   \   00000008   0x6001             STR      R1,[R0, #+0]
    176              return 1;
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xE01C             B.N      ??LPLD_GPIO_SetIsr_1
    177            }
    178            else if(port == PORTB_BASE_PTR)
   \                     ??LPLD_GPIO_SetIsr_0:
   \   0000000E   0x....             LDR.N    R2,??DataTable2_3  ;; 0x4004a000
   \   00000010   0x4290             CMP      R0,R2
   \   00000012   0xD103             BNE.N    ??LPLD_GPIO_SetIsr_2
    179            {
    180              GPIO_ISR[1] = isr_func;
   \   00000014   0x....             LDR.N    R0,??DataTable2_11
   \   00000016   0x6041             STR      R1,[R0, #+4]
    181              return 1;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xE015             B.N      ??LPLD_GPIO_SetIsr_1
    182            }
    183            else if(port == PORTC_BASE_PTR)
   \                     ??LPLD_GPIO_SetIsr_2:
   \   0000001C   0x....             LDR.N    R2,??DataTable2_5  ;; 0x4004b000
   \   0000001E   0x4290             CMP      R0,R2
   \   00000020   0xD103             BNE.N    ??LPLD_GPIO_SetIsr_3
    184            {
    185              GPIO_ISR[2] = isr_func;
   \   00000022   0x....             LDR.N    R0,??DataTable2_11
   \   00000024   0x6081             STR      R1,[R0, #+8]
    186              return 1;
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0xE00E             B.N      ??LPLD_GPIO_SetIsr_1
    187            }
    188            else if(port == PORTD_BASE_PTR)
   \                     ??LPLD_GPIO_SetIsr_3:
   \   0000002A   0x....             LDR.N    R2,??DataTable2_7  ;; 0x4004c000
   \   0000002C   0x4290             CMP      R0,R2
   \   0000002E   0xD103             BNE.N    ??LPLD_GPIO_SetIsr_4
    189            {
    190              GPIO_ISR[3] = isr_func;
   \   00000030   0x....             LDR.N    R0,??DataTable2_11
   \   00000032   0x60C1             STR      R1,[R0, #+12]
    191              return 1;
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0xE007             B.N      ??LPLD_GPIO_SetIsr_1
    192            }
    193            else if(port == PORTE_BASE_PTR)
   \                     ??LPLD_GPIO_SetIsr_4:
   \   00000038   0x....             LDR.N    R2,??DataTable2_9  ;; 0x4004d000
   \   0000003A   0x4290             CMP      R0,R2
   \   0000003C   0xD103             BNE.N    ??LPLD_GPIO_SetIsr_5
    194            {
    195              GPIO_ISR[4] = isr_func;
   \   0000003E   0x....             LDR.N    R0,??DataTable2_11
   \   00000040   0x6101             STR      R1,[R0, #+16]
    196              return 1;
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0xE000             B.N      ??LPLD_GPIO_SetIsr_1
    197            }
    198            else
    199            {
    200              return 0;
   \                     ??LPLD_GPIO_SetIsr_5:
   \   00000046   0x2000             MOVS     R0,#+0
   \                     ??LPLD_GPIO_SetIsr_1:
   \   00000048   0x4770             BX       LR               ;; return
    201            }
    202          }
    203          
    204          /*
    205           * LPLD_GPIO_Set
    206           * 设置GPIO端口0~31位输出
    207           * 
    208           * 参数:
    209           *    p--GPIO口基地址
    210           *      |__PTA_BASE_PTR--Port A
    211           *      |__PTB_BASE_PTR--Port B
    212           *      |__PTC_BASE_PTR--Port C
    213           *      |__PTD_BASE_PTR--Port D
    214           *      |__PTE_BASE_PTR--Port E
    215           *    data--输出数据
    216           *      |__0x00000000~0xFFFFFFFF--低到高代表GPIO口的第0~31位数据
    217           *
    218           * 输出:
    219           *
    220           */

   \                                 In section .text, align 2, keep-with-next
    221          void LPLD_GPIO_Set(GPIO_MemMapPtr p, uint32_t data)
    222          { 
    223            GPIO_PDOR_REG(p) = data;
   \                     LPLD_GPIO_Set:
   \   00000000   0x6001             STR      R1,[R0, #+0]
    224          }
   \   00000002   0x4770             BX       LR               ;; return
    225          
    226          /*
    227           * LPLD_GPIO_Set_b
    228           * 设置GPIO端口一位的输出
    229           * 
    230           * 参数:
    231           *    p--GPIO口基地址
    232           *      |__PTA_BASE_PTR--Port A
    233           *      |__PTB_BASE_PTR--Port B
    234           *      |__PTC_BASE_PTR--Port C
    235           *      |__PTD_BASE_PTR--Port D
    236           *      |__PTE_BASE_PTR--Port E
    237           *    port_bit--位数
    238           *      |__0~31--GPIO口的第0~31位
    239           *    data--输出数据
    240           *      |__0~1--位输出高或低电平
    241           *
    242           * 输出:
    243           *
    244           */

   \                                 In section .text, align 2, keep-with-next
    245          void LPLD_GPIO_Set_b(GPIO_MemMapPtr p, uint8_t port_bit, uint8_t data)
    246          {
    247            if(data==0)
   \                     LPLD_GPIO_Set_b:
   \   00000000   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000002   0x2A00             CMP      R2,#+0
   \   00000004   0xD104             BNE.N    ??LPLD_GPIO_Set_b_0
    248              GPIO_PCOR_REG(p) = 0x1u<<port_bit;
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0xFA12 0xF101      LSLS     R1,R2,R1
   \   0000000C   0x6081             STR      R1,[R0, #+8]
   \   0000000E   0xE003             B.N      ??LPLD_GPIO_Set_b_1
    249            else
    250              GPIO_PSOR_REG(p) = 0x1u<<port_bit;
   \                     ??LPLD_GPIO_Set_b_0:
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0xFA12 0xF101      LSLS     R1,R2,R1
   \   00000016   0x6041             STR      R1,[R0, #+4]
    251          }
   \                     ??LPLD_GPIO_Set_b_1:
   \   00000018   0x4770             BX       LR               ;; return
    252          
    253          /*
    254           * LPLD_GPIO_Toggle
    255           * 设置GPIO端口0~31的电平翻转
    256           * 
    257           * 参数:
    258           *    p--GPIO口基地址
    259           *      |__PTA_BASE_PTR--Port A
    260           *      |__PTB_BASE_PTR--Port B
    261           *      |__PTC_BASE_PTR--Port C
    262           *      |__PTD_BASE_PTR--Port D
    263           *      |__PTE_BASE_PTR--Port E
    264           *    data--翻转数据
    265           *      |__0x00000000~0xFFFFFFFF--低到高代表GPIO口的第0~31位的翻转，1为反转，0为保持不变。
    266           *
    267           * 输出:
    268           *
    269           */

   \                                 In section .text, align 2, keep-with-next
    270          void LPLD_GPIO_Toggle(GPIO_MemMapPtr p, uint32_t data)
    271          {
    272            GPIO_PTOR_REG(p) = data;
   \                     LPLD_GPIO_Toggle:
   \   00000000   0x60C1             STR      R1,[R0, #+12]
    273          }
   \   00000002   0x4770             BX       LR               ;; return
    274          
    275          /*
    276           * LPLD_GPIO_Toggle_b
    277           * 设置GPIO端口一位的翻转
    278           * 
    279           * 参数:
    280           *    p--GPIO口基地址
    281           *      |__PTA_BASE_PTR--Port A
    282           *      |__PTB_BASE_PTR--Port B
    283           *      |__PTC_BASE_PTR--Port C
    284           *      |__PTD_BASE_PTR--Port D
    285           *      |__PTE_BASE_PTR--Port E
    286           *    port_bit--位数
    287           *      |__0~31--设置GPIO口的一位翻转
    288           *
    289           * 输出:
    290           *
    291           */

   \                                 In section .text, align 2, keep-with-next
    292          void LPLD_GPIO_Toggle_b(GPIO_MemMapPtr p, uint8_t port_bit)
    293          {
    294            GPIO_PTOR_REG(p) = 0x1u<<port_bit;
   \                     LPLD_GPIO_Toggle_b:
   \   00000000   0x2201             MOVS     R2,#+1
   \   00000002   0xFA12 0xF101      LSLS     R1,R2,R1
   \   00000006   0x60C1             STR      R1,[R0, #+12]
    295          }
   \   00000008   0x4770             BX       LR               ;; return
    296          
    297          /*
    298           * LPLD_GPIO_Get
    299           * 取得GPIO口的数据
    300           * 
    301           * 参数:
    302           *    p--GPIO口基地址
    303           *      |__PTA_BASE_PTR--Port A
    304           *      |__PTB_BASE_PTR--Port B
    305           *      |__PTC_BASE_PTR--Port C
    306           *      |__PTD_BASE_PTR--Port D
    307           *      |__PTE_BASE_PTR--Port E
    308           *
    309           * 输出:
    310           *    指定GPIO口的32位输入
    311           *
    312           */

   \                                 In section .text, align 2, keep-with-next
    313          uint32_t LPLD_GPIO_Get(GPIO_MemMapPtr p)
    314          {
    315            return GPIO_PDIR_REG(p);
   \                     LPLD_GPIO_Get:
   \   00000000   0x6900             LDR      R0,[R0, #+16]
   \   00000002   0x4770             BX       LR               ;; return
    316          }
    317          
    318          /*
    319           * LPLD_GPIO_Get_b
    320           * 取得GPIO口某一位的数据
    321           * 
    322           * 参数:
    323           *    p--GPIO口基地址
    324           *      |__PTA_BASE_PTR--Port A
    325           *      |__PTB_BASE_PTR--Port B
    326           *      |__PTC_BASE_PTR--Port C
    327           *      |__PTD_BASE_PTR--Port D
    328           *      |__PTE_BASE_PTR--Port E
    329           *    port_bit--位数
    330           *      |__0~31--GPIO口的第0~31位
    331           *
    332           * 输出:
    333           *    指定GPIO口的指定位数的电平
    334           *
    335           */

   \                                 In section .text, align 2, keep-with-next
    336          uint8_t LPLD_GPIO_Get_b(GPIO_MemMapPtr p, uint8_t port_bit)
    337          {
    338            return (GPIO_PDIR_REG(p)>>port_bit)&0x1u;
   \                     LPLD_GPIO_Get_b:
   \   00000000   0x6900             LDR      R0,[R0, #+16]
   \   00000002   0x40C8             LSRS     R0,R0,R1
   \   00000004   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000008   0x4770             BX       LR               ;; return
    339          }
    340          
    341          /*
    342           * LPLD_GPIO_Isr
    343           * GPIO通用中断底层入口函数
    344           * 
    345           * 用户无需修改，程序自动进入对应通道中断函数
    346           */

   \                                 In section .text, align 2, keep-with-next
    347          void LPLD_GPIO_Isr(void)
    348          {
   \                     LPLD_GPIO_Isr:
   \   00000000   0xB510             PUSH     {R4,LR}
    349            #define GPIO_VECTORNUM   (*(volatile uint8_t*)(0xE000ED04))
    350            uint8_t gpio_port = GPIO_VECTORNUM - 103;
   \   00000002   0x....             LDR.N    R0,??DataTable2_12  ;; 0xe000ed04
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0xF1B0 0x0467      SUBS     R4,R0,#+103
    351              
    352            //调用用户自定义中断服务
    353            GPIO_ISR[gpio_port]();  
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x....             LDR.N    R0,??DataTable2_11
   \   0000000E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000012   0x4780             BLX      R0
    354            
    355            //清除中断标志位
    356            PORT_ISFR_REG((PORT_MemMapPtr)((0x40049+gpio_port)<<12))=0xFFFFFFFF;
   \   00000014   0x....             LDR.N    R0,??DataTable2_13  ;; 0x40049
   \   00000016   0xFA50 0xF084      UXTAB    R0,R0,R4
   \   0000001A   0x0300             LSLS     R0,R0,#+12
   \   0000001C   0xF05F 0x31FF      MOVS     R1,#-1
   \   00000020   0xF8C0 0x10A0      STR      R1,[R0, #+160]
    357          }
   \   00000024   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x40049000         DC32     0x40049000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x400FF000         DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x4004A000         DC32     0x4004a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x400FF040         DC32     0x400ff040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x4004B000         DC32     0x4004b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x400FF080         DC32     0x400ff080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x4004C000         DC32     0x4004c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x400FF0C0         DC32     0x400ff0c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x4004D000         DC32     0x4004d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x400FF100         DC32     0x400ff100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x........         DC32     GPIO_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0xE000ED04         DC32     0xe000ed04

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x00040049         DC32     0x40049

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  LPLD_GPIO_Get
        0  LPLD_GPIO_Get_b
       12  LPLD_GPIO_Init
        8  LPLD_GPIO_Isr
             8 -- Indirect call
        0  LPLD_GPIO_Set
        0  LPLD_GPIO_SetIsr
        0  LPLD_GPIO_Set_b
        0  LPLD_GPIO_Toggle
        0  LPLD_GPIO_Toggle_b


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      20  GPIO_ISR
       4  LPLD_GPIO_Get
      10  LPLD_GPIO_Get_b
     286  LPLD_GPIO_Init
      38  LPLD_GPIO_Isr
       4  LPLD_GPIO_Set
      74  LPLD_GPIO_SetIsr
      26  LPLD_GPIO_Set_b
       4  LPLD_GPIO_Toggle
      10  LPLD_GPIO_Toggle_b

 
  20 bytes in section .bss
 512 bytes in section .text
 
 512 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
